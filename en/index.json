[{"content":"前言 VMware自带的VMware Tools复制粘贴功能失败，所以安装open-vm-tools以使用复制粘贴功能。\n一、open-vm-tools是什么？ open-vm-tools 是一组用于 VMware 虚拟机中的开源工具，它们提供了一些与虚拟机操作和管理相关的功能。这些工具与 VMware 虚拟化平台集成，可以在虚拟机中提供更好的性能和功能。以下是一些 open-vm-tools 提供的功能：\n虚拟机增强功能： open-vm-tools 提供了与 VMware 虚拟化平台集成的增强功能，例如拖放文件、共享剪贴板、虚拟机自适应大小等。\n虚拟机信息获取： 这些工具可以提供有关虚拟机配置、硬件和操作系统的信息，使你可以更好地监控和管理虚拟机。\n时钟同步： open-vm-tools 可以帮助虚拟机与虚拟化主机进行时钟同步，确保虚拟机时间与主机时间保持一致。\n电源管理： 这些工具允许你在虚拟机中进行电源管理操作，如重启、关机等。\n性能优化： open-vm-tools 可以与虚拟化平台一起工作，优化虚拟机的性能，提供更好的资源管理和协作。\n注意，open-vm-tools 适用于许多 Linux 发行版，并提供了虚拟机操作和管理方面的许多便利功能。如果你在 VMware 虚拟机中运行 Linux 操作系统，可以考虑安装和使用这些工具来提升虚拟机的性能和功能。安装 open-vm-tools 的方法可能会因你使用的 Linux 发行版而有所不同，通常你可以在操作系统的软件仓库中找到它。\n二、操作步骤 删除VMware-tools 判断自己的VMware是否安装了VMware tools\n如图，显示“重新安装VMware tools”则说明已经安装了VMware tools，然后执行以下命令删除VMware tools\nsudo vmware-uninstall-tools.pl sudo rm -rf /usr/lib/vmware-tools sudo apt-get autoremove open-vm-tools --purge 如果没安装过VMware tools则忽略第一步，直接进入第二步。\n安装 open-vm-tools sudo apt-get install open-vm-tools sudo apt-get install open-vm-tools-desktop 安装完成后，重启虚拟机即可使用复制粘贴功能。\nWindows系统中复制粘贴快捷键是 ctrl+c ctrl+v\nLinux系统中复制粘贴快捷键是 shift+ctrl+c shift+ctrl+v\n文件复制粘贴功能需使用鼠标右键，而不能直接使用快捷键。\n","permalink":"https://eddyblog.cn/en/posts/tech/linux_vmware_copy_and_paste/","summary":"前言 VMware自带的VMware Tools复制粘贴功能失败，所以安装open-vm-tools以使用复制粘贴功能。 一、open-vm-tools是什么？ open-vm-tools 是一组用于 VMware 虚拟机中的开源工具，它们提供了一些与虚拟机操作和管理相关的功能。这些工具与 VMware 虚拟化平台集成，可以在虚拟机中提供更","title":"【Linux】vmware实现复制粘贴功能"},{"content":"前言 Hugo添加不蒜子Busuanzi页面浏览次数与阅读数据统计\n一、Busuanzi是什么？ Busuanzi是一个用于统计网站访问量的工具。它通常嵌入到网页中，可以追踪页面的浏览次数，方可数量积极其他一些基本的访问数据。这个工具可以帮助网站管理员了解他们的网站受欢迎程度和流量情况。\n二、使用步骤 在head.html，footer.html，single.html，config.yml进行修改\nhead.html 我的papermod的路径为themes/Hugo-PaperMod/layouts/partials/head.html\n添加以下代码\n\u0026lt;!-- busuanzi --\u0026gt; {{- if .Site.Params.busuanzi.enable -}} \u0026lt;script async src=\u0026#34;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;meta name=\u0026#34;referrer\u0026#34; content=\u0026#34;no-referrer-when-downgrade\u0026#34;\u0026gt; {{- end -}} footer.html 用于在站点底部显示总访问量与访客数\n我的PaperMod路径为themes/Hugo-PaperMod/layouts/partials/footer.html\n添加以下代码，注意添加在\u0026lt;footer\u0026gt;代码块里\n\u0026lt;!-- busuanzi --\u0026gt; {{ if .Site.Params.busuanzi.enable -}} \u0026lt;div class=\u0026#34;busuanzi-footer\u0026#34;\u0026gt; \u0026lt;span id=\u0026#34;busuanzi_container_site_pv\u0026#34;\u0026gt; 本站总访问量\u0026lt;span id=\u0026#34;busuanzi_value_site_pv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;次 \u0026lt;/span\u0026gt; \u0026lt;span id=\u0026#34;busuanzi_container_site_uv\u0026#34;\u0026gt; 本站访客数\u0026lt;span id=\u0026#34;busuanzi_value_site_uv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;人次 \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; {{- end -}} single.html 用于显示每篇文章阅读量\n我的papermod路径为themes/Hugo-PaperMod/layouts/_default/single.html\n添加以下代码，加在\u0026lt;header\u0026gt;代码块内\n\u0026lt;!-- busuanzi --\u0026gt; {{ if .Site.Params.busuanzi.enable -}} \u0026lt;div class=\u0026#34;meta-item\u0026#34;\u0026gt;\u0026amp;nbsp·\u0026amp;nbsp \u0026lt;span id=\u0026#34;busuanzi_container_page_pv\u0026#34;\u0026gt;本文阅读量\u0026lt;span id=\u0026#34;busuanzi_value_page_pv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;次\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; {{- end }} config.yml 回到根目录的config.yml，在params里加上busuanzi:功能\n显示统计即为true\nparams: busuanzi: enable: true 不想显示统计即为false\nparams: busuanzi: enable: false 总结 本文简单介绍了Hugo添加不蒜子Busuanzi站点访问量与阅读量统计的操作步骤和方法。\n","permalink":"https://eddyblog.cn/en/posts/tech/hugo_busuanzi/","summary":"前言 Hugo添加不蒜子Busuanzi页面浏览次数与阅读数据统计 一、Busuanzi是什么？ Busuanzi是一个用于统计网站访问量的工具。它通常嵌入到网页中，可以追踪页面的浏览次数，方可数量积极其他一些基本的访问数据。这个工具可以帮助网站管理员了解他们的网站受欢迎程度和流量情况","title":"【Hugo】Hugo添加不蒜子Busuanzi页面浏览次数与阅读数据统计"},{"content":"前言： Hugo使用Chroma插件进行代码高亮。\nChroma: Hugo 在 v0.65.0 版本之后使用了 Chroma 代码高亮插件，它是一个 Go 语言实现的非常漂亮并能快速生成的代码高亮工具。\n操作步骤： 默认的代码高亮配置文件如下，你可以复制到你的配置文件config.yml内进行修改：\nyaml 格式的配置文件：\nmarkup: highlight: codeFences: true guessSyntax: false hl_Lines: \u0026#34;\u0026#34; lineNoStart: 1 lineNos: false lineNumbersInTable: true noClasses: true style: monokai tabWidth: 4 toml 格式的配置文件：\n[markup] [markup.highlight] anchorLineNos = false codeFences = true guessSyntax = true hl_Lines = \u0026#34;\u0026#34; lineAnchors = \u0026#34;\u0026#34; lineNoStart =1 lineNos = true lineNumbersInTable = true noClasses = true style = \u0026#34;monokai\u0026#34; tabWidth = 4 json 格式的配置文件：\n{ \u0026#34;markup\u0026#34;:{ \u0026#34;highlight\u0026#34;:{ \u0026#34;codeFences\u0026#34;:true, \u0026#34;guessSyntax\u0026#34;:false, \u0026#34;hl_Lines\u0026#34;:\u0026#34;\u0026#34;, \u0026#34;lineNoStart\u0026#34;:1, \u0026#34;lineNos\u0026#34;:false, \u0026#34;lineNumbersInTable\u0026#34;:true, \u0026#34;noClasses\u0026#34;:true, \u0026#34;style\u0026#34;:\u0026#34;monokai\u0026#34;, \u0026#34;tabWidth\u0026#34;:4 } } } 配置文件中各个设置项的含义如下：\ncodeFences：代码围栏功能，这个功能一般都要设为 true 的，不然很难看，就是干巴巴的-代码文字，没有颜色。\nguessSyntax：猜测语法，这个功能建议设置为 true, 如果你没有设置要显示的语言则会自动匹配。\nhl_Lines：高亮的行号，一般这个不设置，因为每个代码块我们可能希望让高亮的地方不一样。\nlineNoStart：行号从编号几开始，一般从 1 开始。\nlineNos：是否显示行号\nlineNumbersInTable：使用表来格式化行号和代码,而不是 标签。这个属性一般设置为 true.\nnoClasses：使用 class 标签，而不是内嵌的内联样式\n关于\u0026quot;style\u0026quot; https://xyproto.github.io/splash/docs/all.html\n这个网页呈现了所有markup的style样式，如下图所示\n","permalink":"https://eddyblog.cn/en/posts/tech/hugo_code_highlight/","summary":"前言： Hugo使用Chroma插件进行代码高亮。 Chroma: Hugo 在 v0.65.0 版本之后使用了 Chroma 代码高亮插件，它是一个 Go 语言实现的非常漂亮并能快速生成的代码高亮工具。 操作步骤： 默认的代码高亮配置文件如下，你可以复制到你的配置文件config.yml内进行修改： yaml 格式的配置文件： markup: highlight: codeFences: true guessSyntax: false hl_Lines: \u0026#34;\u0026#34; lineNoStart: 1 lineNos: false lineNumbersInTable:","title":"【Hugo】hugo代码高亮"},{"content":"前言 hugo主题美化-添加emoji\n一、emoji表情符号素材网站（链接来源于网络资源） https://www.lovelyemoji.com/emoji-biaoqing/\nhttps://www.emojipedia.org/zh/\nhttps://www.emojiall.com/zh-hans\n二、使用步骤 1.在emoji素材网站复制emoji 2.在config.yml进行粘贴emoji （也可以在自己想改的相应文件进行修改） 代码如下（示例）：\nmenu: main: - identifier: search name: 🔍 搜索 url: search weight: 1 - identifier: home name: 🏠 主页 url: / weight: 2 - identifier: posts name: 📚 文章 url: posts weight: 3 - identifier: tags name: 🧩 标签 url: tags weight: 15 - identifier: archives name: ⏱️ 时间轴 url: archives/ weight: 20 - identifier: about name: 🙋🏻‍♂️ 关于 url: about weight: 50 3.效果图 总结 本文仅仅简单介绍了hugo主题美化-添加emoji。\n","permalink":"https://eddyblog.cn/en/posts/tech/hugo_emoji/","summary":"前言 hugo主题美化-添加emoji 一、emoji表情符号素材网站（链接来源于网络资源） https://www.lovelyemoji.com/emoji-biaoqing/ https://www.emojipedia.org/zh/ https://www.emojiall.com/zh-hans 二、使用步骤 1.在emoji素材网站复制emoji 2.在config.yml进行粘贴emoji （也可以在自己想改的相应文件进行修改） 代码如下（示例）： menu: main: - identifier: search name: 🔍 搜索 url: search weight: 1 - identifier: home name: 🏠","title":"【Hugo】hugo主题美化-添加emoji"},{"content":"项目场景： Hugo\n问题描述 在本地使用Hugo 构建网站并在本地服务器上正常运行，但在将网站部署到 GitHub 远程仓库时出现了错误\n解决方案： 检查 GitHub 仓库代码： 首先，确保你将正确的代码推送到了 GitHub 远程仓库。在本地使用 git status 和 git diff 命令来检查是否有未提交的更改，并使用 git push 命令将代码推送到远程仓库。 （假如发现Github远程仓库里的文件污染严重，修改难度很大，可以在Github页面将username.github.io该仓库删除，然后重新创建一次username.github.io仓库，不过要确保本地有文件备份再删除远程仓库，远程仓库删除后无法恢复） 检查主题和模板： 如果你使用了主题或模板，确保它们在 GitHub 上也是最新的版本，并与本地使用的版本相同。有时候，在不同环境中使用不同的主题或模板版本可能导致不一致。\n检查配置文件： Hugo 使用配置文件来指定网站的设置和参数。确保在 GitHub 仓库中的配置文件与本地一致，并且没有不一致之处\n","permalink":"https://eddyblog.cn/en/posts/tech/hugo_error1/","summary":"项目场景： Hugo 问题描述 在本地使用Hugo 构建网站并在本地服务器上正常运行，但在将网站部署到 GitHub 远程仓库时出现了错误 解决方案： 检查 GitHub 仓库代码： 首先，确保你将正确的代码推送到了 GitHub 远程仓库。在本地使用 git status 和 git diff 命令来检查是否有未提交的更改，并使用 git push 命令将代码推送到远程仓库。 （假如发现Gi","title":"【Hugo_error】在本地使用Hugo构建网站并在本地服务器上正常运行，但在将网站部署到GitHub远程仓库时出现了错误"},{"content":"前言 Githubpages对应仓库username.github.io删除之后,重新创建一次仍然可以匹配到Githubpages\n操作步骤 如果你删除了之前的 GitHub Pages 仓库（例如 username.github.io），然后重新创建了同名的仓库，并将该仓库的内容推送到 main 分支（或其他指定的分支），GitHub Pages 会自动重新启用，并根据新的仓库内容生成你的个人网站。\n以下是你需要做的步骤：\n删除旧的仓库： 删除之前的 username.github.io 仓库。\n创建新的仓库： 在 GitHub 上创建一个新的 username.github.io 仓库。\n将网站内容推送到新仓库： 将你的网站内容（包括 HTML、CSS、JavaScript 文件等）推送到新仓库的 main 分支（或其他指定的分支）中。\n等待 GitHub Pages 构建： 一旦你推送了内容，GitHub Pages 将会开始自动构建你的个人网站。\n访问个人网站： 在一段时间后，你可以通过浏览器访问 https://username.github.io 来查看你的个人网站。GitHub Pages 将使用新的仓库内容来生成网站。\n重要提示：可能需要一些时间来让 GitHub Pages 更新并生成你的新网站。这通常需要几分钟到几个小时的时间。此外，如果你之前使用了自定义域名（如 username.com）来指向 GitHub Pages，你可能需要重新设置域名解析以确保它与新的仓库匹配。\n总之，删除并重新创建一个同名的 GitHub Pages 仓库后，只要你推送了新内容，GitHub Pages 将重新构建你的个人网站。\n","permalink":"https://eddyblog.cn/en/posts/tech/hugo_githubpages/","summary":"前言 Githubpages对应仓库username.github.io删除之后,重新创建一次仍然可以匹配到Githubpages 操作步骤 如果你删除了之前的 GitHub Pages 仓库（例如 username.github.io），然后重新创建了同名的仓库，并将该仓库的内容推送到 main 分支（或其他指定的分支","title":"【Hugo】githubpages对应仓库username.github.io"},{"content":"前言 Hugo设置主页头像\n操作步骤 1.制作圆形头像：在线网站 （链接来源于网络资源） 网站如下（示例）：\nhttps://crop-circle.imageonline.co/cn/#google_vignette\nhttps://bigimage.11zon.com/zh-cn/crop-circle-image/\n2.config.yml更改 languages: en: params: languageName: \u0026#34;English\u0026#34; weight: 1 profileMode: enabled: true title: Eddy - blog subtitle: # subtitle: imageUrl: \u0026#34;img/logo3.png\u0026#34; #图片放在static/img/logo3.png imageTitle: imageWidth: 150 # 设置图像尺寸 imageHeight: 150 # 设置图像尺寸 主页头像 image 即为下图中圆形图像\n总结 本文简单介绍了Hugo设置主页头像的操作步骤和方法。\n","permalink":"https://eddyblog.cn/en/posts/tech/hugo_homepage_avatar/","summary":"前言 Hugo设置主页头像 操作步骤 1.制作圆形头像：在线网站 （链接来源于网络资源） 网站如下（示例）： https://crop-circle.imageonline.co/cn/#google_vignette https://bigimage.11zon.com/zh-cn/crop-circle-image/ 2.config.yml更改 languages: en: params: languageName: \u0026#34;English\u0026#34; weight: 1 profileMode: enabled: true title: Eddy - blog subtitle: # subtitle: imageUrl: \u0026#34;img/logo3.png\u0026#34; #图片放在static/img/logo3.png imageTitle: imageWidth: 150 # 设置图像尺寸 imageHeight: 150 # 设置图像尺寸 主页头像 image 即为下图中圆形","title":"【Hugo】设置主页头像"},{"content":"前言 Hugo添加icon/socialIcons\nsocialIcons 以添加socialIcons为例\nHugo本身是自带了很多支持的socialIcons的\n如:twitter，ins，github，email等等，写下如下代码，则会自动匹配对应icon\nparams: socialIcons: - name = \u0026#34;twitter\u0026#34; url = \u0026#34;https://twitter.com\u0026#34; 添加icon操作步骤 而假如想添加额外的socialIcons，那么需要自己添加svg代码，才能匹配到合适的icon图标\n下面是添加socialIcons：csdn的具体教程\nparams: socialIcons: - name: csdn url: \u0026#34;https://www.csdn.net/\u0026#34; 进入svg图库网站，以https://www.iconfont.cn/阿里巴巴矢量库为例\n搜索你需要的网站icon，以csdn为例\n选定合适的icon 点击图像，添加入库 添加至项目，创建项目Hugo，加入至项目Hugo 点击图像，对尺寸进行编辑（假如不知道怎么把握尺寸的话，可以先不编辑） 点击下载，复制图像的svg代码 进入layouts\\partials\\svg.html，添加刚刚复制的代码（我是直接在博客源码进行更改的，而不是themes文件夹） \u0026lt;svg t=\u0026#34;1691595802782\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;894\u0026#34; width=\u0026#34;200\u0026#34; height=\u0026#34;200\u0026#34;\u0026gt;\u0026lt;path d=\u0026#34;M512 1024C229.2224 1024 0 794.7776 0 512 0 229.2224 229.2224 0 512 0c282.7776 0 512 229.2224 512 512 0 282.7776-229.2224 512-512 512z m17.066667-413.525333c34.850133 4.352 68.778667 5.12 102.741333 2.0992 23.04-2.048 44.817067-8.362667 64.170667-21.9136 38.212267-26.794667 49.783467-85.1968 24.251733-123.050667-14.626133-21.7088-36.8128-30.344533-60.757333-35.498667-35.054933-7.543467-70.4512-5.751467-105.847467-3.413333-5.666133 0.3584-6.7584 3.072-7.236267 8.209067-3.072 32.682667-6.536533 65.314133-9.813333 97.962666-2.5088 24.814933-4.932267 49.629867-7.509333 75.605334z m53.4016-33.928534c1.962667-20.906667 3.6352-39.338667 5.4272-57.770666 1.553067-15.906133 3.413333-31.778133 4.727466-47.701334 0.3584-4.283733 1.553067-6.656 5.956267-6.382933 15.616 1.041067 31.709867 0.034133 46.728533 3.652267 36.488533 8.823467 48.725333 54.306133 23.3472 83.029333-15.8208 17.902933-36.7616 23.586133-59.255466 25.088-8.465067 0.546133-17.015467 0.085333-26.9312 0.085333zM512 434.295467c-2.184533-0.648533-3.5328-1.1776-4.932267-1.4336-37.717333-6.877867-75.690667-8.328533-113.646933-2.816-20.974933 3.037867-41.0112 9.489067-57.480533 23.330133-22.9888 19.319467-21.640533 46.848 4.4032 62.0032 13.056 7.594667 28.023467 12.509867 42.5984 17.288533 14.08 4.608 28.996267 6.826667 43.144533 11.264 12.5952 3.925333 14.011733 14.318933 3.584 22.306134-3.345067 2.56-7.441067 5.085867-11.537067 5.751466-11.195733 1.826133-22.698667 4.386133-33.826133 3.566934-24.098133-1.774933-48.042667-5.461333-72.5504-8.430934-1.365333 10.615467-2.935467 23.0912-4.5568 35.9424 4.181333 1.365333 7.68 2.730667 11.264 3.618134 33.9456 8.4992 68.386133 9.608533 102.912 5.12 20.087467-2.6112 39.4752-7.901867 56.695467-19.029334 28.603733-18.4832 36.693333-57.1904-4.676267-75.383466-14.506667-6.382933-30.190933-10.410667-45.482667-15.086934-11.4176-3.4816-23.313067-5.614933-34.525866-9.5232-9.7792-3.413333-11.144533-12.202667-3.037867-18.397866 4.6592-3.549867 10.717867-6.997333 16.384-7.3728a480.853333 480.853333 0 0 1 53.384533-0.853334c15.377067 0.699733 30.651733 3.549867 46.4896 5.5296L512 434.295467z m257.143467 2.048L750.933333 614.2976h54.152534c4.778667-45.636267 9.710933-90.7264 14.062933-135.8848 0.6144-6.365867 2.3552-8.840533 8.686933-9.0112 11.434667-0.273067 22.8864-1.979733 34.286934-1.570133 23.722667 0.853333 42.3936 9.728 38.4 43.264-2.901333 24.2688-5.597867 48.571733-8.2432 72.874666-1.092267 10.069333-1.826133 20.189867-2.730667 30.4128h55.330133c3.584-35.259733 7.9872-70.058667 10.496-104.994133 3.413333-47.4624-17.7664-73.3184-64.682666-80.213333-40.96-6.007467-81.339733-0.341333-121.5488 7.133866z m-483.498667 134.6048c-8.738133 1.297067-16.384 2.798933-24.098133 3.4816-25.6512 2.235733-51.319467 3.9424-76.305067-4.266667-13.909333-4.590933-24.6784-12.578133-29.7984-25.9584-7.901867-20.701867 0.887467-47.104 19.831467-60.3136 17.373867-12.117333 37.717333-15.9232 58.453333-15.9232 22.545067-0.017067 45.090133 2.423467 68.232533 3.84L307.2 432.298667c-15.069867-1.723733-29.4912-3.925333-43.997867-4.9152-41.0112-2.798933-80.64 2.6112-117.469866 20.462933-30.020267 14.557867-52.053333 36.010667-58.6752 68.130133-7.850667 38.144 11.537067 69.495467 51.7632 85.845334 19.1488 7.765333 39.287467 12.509867 60.0064 12.5952 24.746667 0.1024 49.493333-1.570133 74.205866-2.952534 3.106133-0.170667 8.311467-2.901333 8.669867-5.034666 1.979733-11.554133 2.730667-23.278933 3.9424-35.464534z\u0026#34; fill=\u0026#34;#DD1700\u0026#34; p-id=\u0026#34;895\u0026#34;\u0026gt;\u0026lt;/path\u0026gt;\u0026lt;/svg\u0026gt; \u0026lt;/svg\u0026gt; --\u0026gt; {{- else if (eq $icon_name \u0026#34;csdn\u0026#34;) -}} \u0026lt;svg t = ..............................这是刚刚复制的svg代码\u0026gt; \u0026lt;!-- \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; viewBox=\u0026#34;0 0 24 24\u0026#34; fill=\u0026#34;none\u0026#34; stroke=\u0026#34;currentColor\u0026#34; stroke-width=\u0026#34;2\u0026#34; stroke-linecap=\u0026#34;round\u0026#34; stroke-linejoin=\u0026#34;round\u0026#34;\u0026gt; \u0026lt;path transform=\u0026#34;scale(0.04) translate(75 40)\u0026#34; stroke-width=\u0026#34;50\u0026#34; d=\u0026#34;M433.754 420.445c-11.526 1.393-44.86-52.741-44.86-52.741 0 31.345-16.136 72.247-51.051 101.786 16.842 5.192 54.843 19.167 45.803 34.421-7.316 12.343-125.51 7.881-159.632 4.037-34.122 3.844-152.316 8.306-159.632-4.037-9.045-15.25 28.918-29.214 45.783-34.415-34.92-29.539-51.059-70.445-51.059-101.792 0 0-33.334 54.134-44.859 52.741-5.37-.65-12.424-29.644 9.347-99.704 10.261-33.024 21.995-60.478 40.144-105.779C60.683 98.063 108.982.006 224 0c113.737.006 163.156 96.133 160.264 214.963 18.118 45.223 29.912 72.85 40.144 105.778 21.768 70.06 14.716 99.053 9.346 99.704z\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; 示意图如下：\n最后在config.yml加入 params: socialIcons: - name: csdn url: \u0026#34;https://www.csdn.net/\u0026#34; ","permalink":"https://eddyblog.cn/en/posts/tech/hugo_icon/","summary":"前言 Hugo添加icon/socialIcons socialIcons 以添加socialIcons为例 Hugo本身是自带了很多支持的socialIcons的 如:twitter，ins，github，email等等，写下如下代码，则会自动匹配对应icon params: socialIcons: - name = \u0026#34;twitter\u0026#34; url = \u0026#34;https://twitter.com\u0026#34; 添加icon操作步骤 而假如想添","title":"【Hugo】Hugo添加icon+socialIcons"},{"content":"前言 利用windows系统的tree命令生成文件夹目录下的树形结构，并倒入至markdown。\n一、tree是什么？ 示例：pandas 是基于NumPy 的一种工具，该工具是为了解决数据分析任务而创建的。\n二、使用步骤 1.在想要生成树形结构的文件夹目录下运行powershell，输入命令tree 输入命令tree生成树形目录（示例）：\n卷 Data 的文件夹 PATH 列表 卷序列号为 E84E-7569 D:. ├─.idea ├─archetypes ├─assets │ ├─css │ │ └─extended │ └─js ├─content │ ├─posts │ │ ├─art │ │ ├─projects │ │ └─tech │ │ └─tech1 │ └─tags ├─data ├─i18n ├─layouts │ ├─partials │ │ └─templates │ ├─shortcodes │ └─_default │ └─_markup ├─public │ ├─assets │ │ ├─css │ │ └─js │ ├─en │ │ ├─about │ │ ├─archives │ │ ├─categories │ │ ├─posts │ │ │ ├─art │ │ │ │ ├─art │ │ │ │ └─page │ │ │ │ └─1 │ │ │ ├─page │ │ │ │ └─1 │ │ │ ├─projects │ │ │ │ ├─page │ │ │ │ │ └─1 │ │ │ │ └─projects │ │ │ └─tech │ │ │ ├─page │ │ │ │ └─1 │ │ │ ├─tech │ │ │ └─tech1 │ │ ├─search │ │ ├─series │ │ └─tags │ │ ├─art │ │ │ └─page │ │ │ └─1 │ │ ├─projects │ │ │ └─page │ │ │ └─1 │ │ └─tech │ │ └─page │ │ └─1 │ ├─fonts │ └─img ├─resources │ └─_gen │ ├─assets │ └─images ├─static │ ├─fonts │ └─img └─themes └─hugo-PaperMod ├─.github │ ├─ISSUE_TEMPLATE │ └─workflows ├─assets │ ├─css │ │ ├─common │ │ ├─core │ │ ├─extended │ │ ├─hljs │ │ └─includes │ └─js ├─i18n ├─images └─layouts ├─partials │ └─templates ├─shortcodes └─_default └─_markup 2.输入命令tree \u0026gt; tree.txt保存生成的树形目录至当前文件夹目录下的tree.txt 3.复制粘贴至markdown文件 在markdown使用```开启代码块，将复制的树形目录粘贴在代码块处\n├─.idea ├─archetypes ├─assets │ ├─css │ │ └─extended │ └─js ├─content │ ├─posts │ │ ├─art │ │ ├─projects │ │ └─tech │ │ └─tech1 │ └─tags ├─data ├─i18n ├─layouts │ ├─partials │ │ └─templates │ ├─shortcodes │ └─_default │ └─_markup ├─public │ ├─assets │ │ ├─css │ │ └─js │ ├─en │ │ ├─about │ │ ├─archives │ │ ├─categories │ │ ├─posts │ │ │ ├─art │ │ │ │ ├─art │ │ │ │ └─page │ │ │ │ └─1 │ │ │ ├─page │ │ │ │ └─1 │ │ │ ├─projects │ │ │ │ ├─page │ │ │ │ │ └─1 │ │ │ │ └─projects │ │ │ └─tech │ │ │ ├─page │ │ │ │ └─1 │ │ │ ├─tech │ │ │ └─tech1 │ │ ├─search │ │ ├─series │ │ └─tags │ │ ├─art │ │ │ └─page │ │ │ └─1 │ │ ├─projects │ │ │ └─page │ │ │ └─1 │ │ └─tech │ │ └─page │ │ └─1 │ ├─fonts │ └─img ├─resources │ └─_gen │ ├─assets │ └─images ├─static │ ├─fonts │ └─img └─themes └─hugo-PaperMod ├─.github │ ├─ISSUE_TEMPLATE │ └─workflows ├─assets │ ├─css │ │ ├─common │ │ ├─core │ │ ├─extended │ │ ├─hljs │ │ └─includes │ └─js ├─i18n ├─images └─layouts ├─partials │ └─templates ├─shortcodes └─_default └─_markup 总结 本文简单介绍了windows系统下tree命令的使用，tree命令可以生成文件夹目录下的树形结构，并倒入至markdown。\n","permalink":"https://eddyblog.cn/en/posts/tech/hugo_introduce_a_tree_directory/","summary":"前言 利用windows系统的tree命令生成文件夹目录下的树形结构，并倒入至markdown。 一、tree是什么？ 示例：pandas 是基于NumPy 的一种工具，该工具是为了解决数据分析任务而创建的。 二、使用步骤 1.在想要生成树形结构的文件夹目录下运行powershell，输入命令","title":"【Hugo】markdown引入树状目录"},{"content":"前言 Hugo博客源码根目录下的static目录是用来存放一些静态文件的（包括图片），执行hugo -F生成的public文件夹，会将static目录下的文件一并导入至public文件夹，并最终呈现至服务器网页上。\n所以想要在markdown里引用本地图片，那么就在根目录的static目录下存放图片，并在mardown里引用就可以了。\n操作步骤 1.在static目录下创建img子目录 将需要引用的图片都放在static\\img下。\n2.在markdown里引用本地图片 如想在markdown里引用1.png，那么就在markdown里输入\n![](/img/1.png) ","permalink":"https://eddyblog.cn/en/posts/tech/hugo_referencing_local_images/","summary":"前言 Hugo博客源码根目录下的static目录是用来存放一些静态文件的（包括图片），执行hugo -F生成的public文件夹，会将static目录下的文件一并导入至public文件夹，并最终呈现至服务器网页上。 所以想要在markdown里引用本地图片，那么就在根目录的static","title":"【Hugo】markdown引用本地图片"},{"content":"前言 建议将博客源码和构建的静态页面分别放在两个仓库里。\n操作步骤 1.博客源码（Github仓库） 私有仓库Yourname-Blog（注意Github仓库命名规范）存放博客源码。（也可以是一个公开的仓库，相当于为他人提供了一个博客模板）\n├─.idea ├─archetypes ├─assets │ ├─css │ │ └─extended │ └─js ├─content │ ├─posts │ │ ├─art │ │ ├─projects │ │ └─tech │ │ └─cover │ └─tags ├─data ├─i18n ├─layouts │ ├─partials │ │ └─templates │ ├─shortcodes │ └─_default │ └─_markup ├─public │ ├─assets │ │ ├─css │ │ └─js │ ├─en │ │ ├─about │ │ ├─archives │ │ ├─categories │ │ ├─posts │ │ │ ├─art │ │ │ │ ├─art │ │ │ │ └─page │ │ │ │ └─1 │ │ │ ├─page │ │ │ │ └─1 │ │ │ ├─projects │ │ │ │ ├─page │ │ │ │ │ └─1 │ │ │ │ └─projects │ │ │ └─tech │ │ │ ├─page │ │ │ │ └─1 │ │ │ ├─tech │ │ │ └─tech1 │ │ ├─search │ │ ├─series │ │ └─tags │ │ ├─art │ │ │ └─page │ │ │ └─1 │ │ ├─projects │ │ │ └─page │ │ │ └─1 │ │ └─tech │ │ └─page │ │ └─1 │ ├─fonts │ └─img ├─resources │ └─_gen │ ├─assets │ └─images ├─static │ ├─fonts │ └─img └─themes └─hugo-PaperMod ├─.github │ ├─ISSUE_TEMPLATE │ └─workflows ├─assets │ ├─css │ │ ├─common │ │ ├─core │ │ ├─extended │ │ ├─hljs │ │ └─includes │ └─js ├─i18n ├─images └─layouts ├─partials │ └─templates ├─shortcodes └─_default └─_markup 2.静态页面（Github仓库） 公有仓库yourname.github.io存放构建的静态页面。\n将构建的静态页面，即public/目录下的内容上传到仓库yourname.github.io ，yourname.github.io会自动绑定Github pages , 就可以通过网址yourname.github.io访问部署好的博客。\n├─assets │ ├─css │ └─js ├─en │ ├─about │ ├─archives │ ├─categories │ ├─posts │ │ ├─art │ │ │ ├─art │ │ │ └─page │ │ │ └─1 │ │ ├─page │ │ │ └─1 │ │ ├─projects │ │ │ ├─page │ │ │ │ └─1 │ │ │ └─projects │ │ └─tech │ │ ├─page │ │ │ └─1 │ │ ├─tech │ │ └─tech1 │ ├─search │ ├─series │ └─tags │ ├─art │ │ └─page │ │ └─1 │ ├─projects │ │ └─page │ │ └─1 │ └─tech │ └─page │ └─1 ├─fonts └─img 总结 本文简单介绍了Hugo框架下在Github仓库分别储存博客源码和静态页面的操作步骤和方法。\n","permalink":"https://eddyblog.cn/en/posts/tech/hugo_saving_source_code/","summary":"前言 建议将博客源码和构建的静态页面分别放在两个仓库里。 操作步骤 1.博客源码（Github仓库） 私有仓库Yourname-Blog（注意Github仓库命名规范）存放博客源码。（也可以是一个公开的仓库，相当于为他人提供了一个博客模板） ├─.idea ├─archetypes ├─ass","title":"【Hugo】在Github仓库分别储存博客源码和静态页面"},{"content":"项目场景： Git bash\n问题描述1： 在错误的目录使用git init初始化了一个仓库，此时应该将该仓库删除\n解决方案1： 使用ls -a 命令显示隐藏文件夹和文件，检查该目录下是否有.git文件夹\n发现该目录下含有.git文件夹，使用rm -rf .git删除.git文件夹，同时本地仓库也会被销毁\n问题描述2： 将本地仓库关联到错误的远程仓库，此时应该将该关联删除\n解决方案2： 查看本地仓库关联的远程仓库名称及URL git remote -v 确认关联的错误远程仓库之后，删除关联 git remote remove \u0026lt;远程仓库名称\u0026gt; ","permalink":"https://eddyblog.cn/en/posts/tech/github_delete_wrong_repository/","summary":"项目场景： Git bash 问题描述1： 在错误的目录使用git init初始化了一个仓库，此时应该将该仓库删除 解决方案1： 使用ls -a 命令显示隐藏文件夹和文件，检查该目录下是否有.git文件夹 发现该目录下含有.git文件夹，使用rm -rf .git删除.git文件夹，同时本地仓库也会被销毁 问题描述2： 将","title":"【Github_error】删除本地仓库/错误的远程仓库关联"},{"content":"项目场景： Git bash\n问题描述： 进行git remote add origin https://github.com/你的用户名/你的用户名.github.io.git命令时\n出现错误：error: remote origin already exists\n原因分析： 与本地仓库关联的远程仓库已经存在，无法进行新的关联\n解决方案： 删除已关联的远程库 git remote rm origin 关联正确的远程仓库 git remote add origin https://github.com/你的用户名/你的用户名.github.io.git 推送到正确的仓库 git push -f origin master ","permalink":"https://eddyblog.cn/en/posts/tech/github_error_remote_origin_already_exists/","summary":"项目场景： Git bash 问题描述： 进行git remote add origin https://github.com/你的用户名/你的用户名.github.io.git命令时 出现错误：error: remote origin already exists 原因分析： 与本地仓库关联的远程仓库已经存在，无法进行新的关联 解决方案： 删除已关联的远程库 git remote rm origin 关联正确的远程仓库 git","title":"【Github_error】解决{error: remote origin already exists.}"},{"content":"前言 下载哪种架构的安装包取决于你的计算机处理器架构。通常，大多数桌面和笔记本电脑使用的是x86_64或简称为amd64架构，因此你应该下载针对该架构的安装包\nAMD 如果你的电脑使用的是x86_64或amd64架构，那么下载x86_64或amd64架构的安装包。\nARM 如果你的计算机是ARM设备，例如某些Raspberry Pi设别或其他ARM架构的计算机，那么你应该下载适用于ARM架构的安装包\n确定处理器架构 要确定你的计算机的处理器架构，可以执行一些操作，例如在命令行中输入uname -m（对于大多数Linux系统），或者在Windows上通过\u0026quot;系统信息\u0026quot;来查看处理器信息。\n总之，下载与你计算机处理器架构匹配的安装包是确保软件能够正常运行的重要一步。\n","permalink":"https://eddyblog.cn/en/posts/tech/github_amd_arm/","summary":"前言 下载哪种架构的安装包取决于你的计算机处理器架构。通常，大多数桌面和笔记本电脑使用的是x86_64或简称为amd64架构，因此你应该下载针对该架构的安装包 AMD 如果你的电脑使用的是x86_64或amd64架构，那么下载x86_64或amd64架构的安装包。 ARM 如果你的计算机是ARM设","title":"【Github】release上的安装包amd和arm的选择"},{"content":"前言： Git bash本地常用指令是默认上传到远程仓库的master分支，而实际上我们应该将文件传入到main主分支\n使用步骤： 假如是将远程库master分支合并到main分支，那么要先将远程仓库克隆到本地\ngit clone xxx.git 将本地的master分支合并到远程的main分支，则上个步骤不用做\n在本地master分支的文件夹目录，创建并切换至main分支 git checkout -b main 推送至main主分支 git push origin main 删除本地master分支（假如本地仓库还要使用的话，最好先不要删除） git branch -d master 删除远程master分支 git push origin :master ","permalink":"https://eddyblog.cn/en/posts/tech/github_merge_the_master_branch_into_the_main_branch/","summary":"前言： Git bash本地常用指令是默认上传到远程仓库的master分支，而实际上我们应该将文件传入到main主分支 使用步骤： 假如是将远程库master分支合并到main分支，那么要先将远程仓库克隆到本地 git clone xxx.git 将本地的master分支合并到远程的main分支，则上个步骤不用做 在本地ma","title":"【Github】将仓库中的master分支合并到main分支"},{"content":"项目场景： Git bash\n问题描述： 进行git push -f origin master命令\n出现错误：fatal: unable to access ' 我的库的http路径 ': OpenSSL SSL_read: Connection was reset, errno 10054\n原因分析： 无法关联github的远程库,SSL连接被重置\n解决方案： 使用命令行解除SSL认证\ngit config --global http.sslVerify \u0026#34;false\u0026#34; git config --global https.sslVerify \u0026#34;false\u0026#34; ","permalink":"https://eddyblog.cn/en/posts/tech/gitub_error1/","summary":"项目场景： Git bash 问题描述： 进行git push -f origin master命令 出现错误：fatal: unable to access ' 我的库的http路径 ': OpenSSL SSL_read: Connection was reset, errno 10054 原因分析： 无法关联github的远程库,SSL连接被重置 解决方案： 使用命令行解除SSL认证 git config --global http.sslVerify \u0026#34;false\u0026#34; git config --global https.sslVerify \u0026#34;false\u0026#34;","title":"【Github】解决{OpenSSL SSL_read: Connection was reset, errno 10054}"},{"content":"项目场景： Hugo\n问题描述 在本地博客源码目录下进行hugo server 失败，无法进入 http://localhost:1313/\n原因分析： 假如修改过\u0026quot;themes\\hugo-PaperMod\u0026quot;的话，那么可能是\u0026quot;themes\\hugo-PaperMod\u0026quot;出现了问题\n解决方案： 将\u0026quot;themes\\hugo-PaperMod\u0026quot;删除，在hugo-PaperMod的Github主页重新下载一次主题并放在\u0026quot;themes\\\u0026quot;目录下，重新hugo server一次\n建议对PaperMod主题做自定义修改的话，最好在博客源码目录下修改，而不是在\u0026quot;themes\\hugo-PaperMod\u0026quot;修改\n这是博客源码目录：\n卷 Data 的文件夹 PATH 列表 卷序列号为 E84E-7569 D:. ├─.idea ├─archetypes ├─assets │ ├─css │ │ └─extended │ └─js ├─content │ ├─posts │ │ ├─art │ │ ├─projects │ │ └─tech │ │ └─tech1 │ └─tags ├─data ├─i18n ├─layouts │ ├─partials │ │ └─templates │ ├─shortcodes │ └─_default │ └─_markup ├─public │ ├─assets │ │ ├─css │ │ └─js │ ├─en │ │ ├─about │ │ ├─archives │ │ ├─categories │ │ ├─posts │ │ │ ├─art │ │ │ │ ├─art │ │ │ │ └─page │ │ │ │ └─1 │ │ │ ├─page │ │ │ │ └─1 │ │ │ ├─projects │ │ │ │ ├─page │ │ │ │ │ └─1 │ │ │ │ └─projects │ │ │ └─tech │ │ │ ├─page │ │ │ │ └─1 │ │ │ ├─tech │ │ │ └─tech1 │ │ ├─search │ │ ├─series │ │ └─tags │ │ ├─art │ │ │ └─page │ │ │ └─1 │ │ ├─projects │ │ │ └─page │ │ │ └─1 │ │ └─tech │ │ └─page │ │ └─1 │ ├─fonts │ └─img ├─resources │ └─_gen │ ├─assets │ └─images ├─static │ ├─fonts │ └─img └─themes └─hugo-PaperMod ├─.github │ ├─ISSUE_TEMPLATE │ └─workflows ├─assets │ ├─css │ │ ├─common │ │ ├─core │ │ ├─extended │ │ ├─hljs │ │ └─includes │ └─js ├─i18n ├─images └─layouts ├─partials │ └─templates ├─shortcodes └─_default └─_markup ","permalink":"https://eddyblog.cn/en/posts/tech/hugo_server_failed/","summary":"项目场景： Hugo 问题描述 在本地博客源码目录下进行hugo server 失败，无法进入 http://localhost:1313/ 原因分析： 假如修改过\u0026quot;themes\\hugo-PaperMod\u0026quot;的话，那么可能是\u0026quot;themes\\hugo-PaperMod\u0026quot;出现了问题 解决方案： 将\u0026quot;themes","title":"【Hugo_error】hugo server失败"},{"content":"hello\nD:. ├─.idea ├─archetypes ├─assets │ ├─css │ │ └─extended │ └─js ├─content │ ├─posts │ │ ├─art │ │ ├─blog │ │ ├─life │ │ ├─projects │ │ ├─read │ │ └─tech │ │ └─tech1 │ └─tags ├─data ├─i18n ├─layouts │ ├─partials │ │ └─templates │ ├─shortcodes │ └─_default │ └─_markup ├─resources │ └─_gen │ ├─assets │ └─images ├─static │ ├─fonts │ └─img └─themes └─hugo-PaperMod ├─.github │ ├─ISSUE_TEMPLATE │ └─workflows ├─assets │ ├─css │ │ ├─common │ │ ├─core │ │ ├─extended │ │ ├─hljs │ │ └─includes │ └─js ├─i18n ├─images └─layouts ├─partials │ └─templates ├─shortcodes └─_default └─_markup ","permalink":"https://eddyblog.cn/en/posts/art/art/","summary":"hello D:. ├─.idea ├─archetypes ├─assets │ ├─css │ │ └─extended │ └─js ├─content │ ├─posts │ │ ├─art │ │ ├─blog │ │ ├─life │ │ ├─projects │ │ ├─read │ │ └─tech │ │ └─tech1 │ └─tags ├─da","title":"Art"},{"content":"","permalink":"https://eddyblog.cn/en/posts/projects/projects/","summary":"","title":"Projects"},{"content":"关于我\n英文名: EddyCliff 职业: 大学生 兴趣: 音乐、电影 ","permalink":"https://eddyblog.cn/en/about/","summary":"关于我 英文名: EddyCliff 职业: 大学生 兴趣: 音乐、电影","title":"🙋🏻‍♂️关于"}]