[{"content":"项目背景 项目背景：在使用 Hugo 构建网站的过程中，可能会遇到各种各样的问题。本篇博客记录了一次在重建 Hugo 网站时遇到的 YAML 解析错误问题，以及如何解决这个问题的过程。\n问题描述 在使用 hugo server 命令重新构建网站时，出现了以下错误信息：\nERROR 1 error building site: assemble: \u0026#34;D:\\myblog\\Eddy-hugo-papermod\\content\\posts\\tech\\PicGo.md:1:1\u0026#34;: failed to unmarshal YAML: yaml: did not find expected key 这个错误提示指向了文件 PicGo.md 的第 1 行，表明在解析该文件的 YAML 头部时出现了问题。\n--- title: \u0026#34;【图床工具】PicGo-bug日记\u0026#34;unable to verify the first certificate\u0026#34;\u0026#34; --- ERROR 2 ERROR Rebuild failed: assemble: \u0026#34;D:\\myblog\\Eddy-hugo-papermod\\content\\posts\\tech\\PicGo_bug.md:13:1\u0026#34;: failed to unmarshal YAML: yaml: line 13: did not find expected key 这个错误提示指向了文件 PicGo.md 的第 13行，表明在解析该文件的 YAML 头部时出现了问题。\n--- description: \u0026#34;解决 PicGo 图床工具中的 \u0026#34;unable to verify the first certificate\u0026#34; 错误\u0026#34; --- 原因分析 根据错误信息，这个问题是因为在 YAML头部中未找到预期的键（key）导致的。在 YAML 格式中，每个键都应该有对应的值，但在该文件的第 1 行 YAML 头部中，缺少了一个预期的键。\nHugo 使用 YAML 头部来存储文章的元信息，这些元信息用于配置文章的标题、日期、作者、标签等信息。如果 YAML 头部的格式不正确，Hugo 解析过程中就会出现问题，导致构建失败。\n解决方案 为了解决这个问题，需要检查并修复 PicGo.md 文件的 YAML 头部。正确的YAML头部应该以三个连续的短横线 --- 开始和结束，中间包含各个键值对。以下是一个示例的 YAML 头部：\n--- title: \u0026#34;文章标题\u0026#34; date: 2023-08-25T00:00:00+08:00 author: \u0026#34;作者\u0026#34; categories: - 技术 tags: - Hugo - Markdown --- 请确保 YAML 头部的格式正确，每个键都有对应的值。如果问题仍然存在，请提供 PicGo.md 文件的 YAML 头部内容，以便更好地帮助诊断和解决问题。\nERROR1 在标题中似乎包含了一个额外的引号。在标题 \u0026ldquo;【图床工具】PicGo-bug日记\u0026quot;unable to verify the first certificate\u0026rdquo;\u0026quot; 中，最后一个引号之后的内容似乎被认为是 YAML 内容的一部分，导致解析错误。\n--- title: \u0026#34;【图床工具】PicGo-bug日记\\\u0026#34;unable to verify the first certificate\\\u0026#34;\u0026#34; --- 请注意，我在标题中的引号前添加了反斜杠（\\），以便正确识别引号并避免引起 YAML 解析问题。同时，请确保标题格式正确，并且您的 Hugo 主题能够正确显示这样的标题。\nERROR2 根据您提供的信息，问题出现在 description 字段的内容中，这里使用了双引号，导致 YAML 解析失败。\n为了解决这个问题，您可以考虑以下两种方法：\n1.使用单引号： 将 description 字段的内容使用单引号括起来，这样就不会与双引号冲突。\ndescription: \u0026#39;解决 PicGo 图床工具中的 \u0026#34;unable to verify the first certificate\u0026#34; 错误。了解错误原因、网络加速工具可能引发的问题，并探讨关闭 fastgithub 解决方案。同时介绍 PicGo 官方文档中的常见问题和解决方法，确保图床上传稳定可靠。\u0026#39; 2.转义双引号： 在 description 字段的内容中，使用反斜杠（\\）来转义双引号，告诉解析器这些双引号不是表示字符串的边界。\ndescription: \u0026#34;解决 PicGo 图床工具中的 \\\u0026#34;unable to verify the first certificate\\\u0026#34; 错误。了解错误原因、网络加速工具可能引发的问题，并探讨关闭 fastgithub 解决方案。同时介绍 PicGo 官方文档中的常见问题和解决方法，确保图床上传稳定可靠。\u0026#34; 请根据您的偏好选择其中一种方法，并进行尝试。这应该可以解决 YAML 解析失败的问题。\n总结 在 Hugo 网站构建的过程中，准确的 YAML 头部格式至关重要。通过本文，您了解了在构建过程中可能遇到的 YAML 解析错误，以及如何通过检查和修复 YAML 头部来解决问题。确保您的 Hugo 网站的元信息格式正确，将有助于避免类似的问题，使构建过程更加顺利。\n","permalink":"https://eddyblog.cn/posts/tech/hugo_bug_yaml/","summary":"项目背景 项目背景：在使用 Hugo 构建网站的过程中，可能会遇到各种各样的问题。本篇博客记录了一次在重建 Hugo 网站时遇到的 YAML 解析错误问题，以及如何解决这个问题的过程。 问题描述 在使用 hugo server 命令重新构建网站时，出现了以下错误信息： ERROR 1 error building site: assemble: \u0026#34;D:\\myblog\\Eddy-hugo-papermod\\content\\posts\\tech\\PicGo.md:1:1\u0026#34;: failed to unmarshal YAML: yaml: did not find expected key 这个错误提示指向了文件 PicGo.md 的第 1 行，表","title":"【Hugo】bug日记 - 解决 YAML 解析错误"},{"content":"项目场景： 在使用 PicGo 进行图床上传时，出现了一个错误，具体的错误信息如下：\n[PicGo ERROR] { \u0026#34;method\u0026#34;: \u0026#34;PUT\u0026#34;, \u0026#34;statusCode\u0026#34;: 0, \u0026#34;message\u0026#34;: \u0026#34;unable to verify the first certificate\u0026#34;, \u0026#34;stack\u0026#34;: \u0026#34;Error: unable to verify the first certificate\\n\u0026#34; } 这个错误让我对图床上传产生了困惑，于是我进行了一些分析和研究，尝试找出问题的原因，并寻求解决方案。\n问题描述： 在使用 PicGo 进行图床上传时，出现了一个与 SSL 证书验证相关的错误。具体的错误信息显示无法验证第一个证书，导致了上传失败。这个问题的发生使我无法顺利地上传图片到我所使用的图床，让我感到困扰。\n原因分析： 经过我的分析，我发现这个问题可能与网络加速工具有关。尤其是在使用类似 fastgithub 这样的网络加速工具时，可能会出现这种问题。尽管这些工具在一些情况下可以提高访问速度，但它们有时也可能引发一些网络通信问题，特别是涉及到 SSL 证书验证的情况。\n在网络通信中，SSL 证书是确保通信安全的关键组成部分。服务器使用 SSL 证书来证明其身份，并加密传输的数据，以防止第三方窃听或篡改。当访问一个使用 SSL（或其继任者 TLS）加密的网站或服务时，浏览器会验证服务器的 SSL 证书，确保连接安全。\n然而，某些网络加速工具可能会修改网络流量，甚至可能与 SSL证书验证机制发生冲突。这可能导致 SSL 证书验证失败，因为服务器的证书无法正常验证，从而出现类似 \u0026quot;unable to verify the first certificate\u0026quot; 的错误。\n解决方案： 根据我自己的实际尝试和一些资料的学习，我找到了一个解决方案来解决这个问题。在我的情况下，关闭 fastgithub 工具后，问题得到了解决。这可能是因为关闭该工具后，网络通信不再受到其影响，恢复了正常的 SSL 证书验证过程。\n要解决类似问题，您也可以尝试以下方法：\n更新工具： 如果您发现网络加速工具版本较旧，可能存在已知的问题，尝试更新到最新版本以获得修复。\n工具配置： 某些工具可能允许您自定义其操作和影响。检查工具的配置选项，看看是否可以调整它们的行为以避免与 SSL 证书验证冲突。\n备用加速工具： 如果一个工具存在问题，您可以尝试其他类似的网络加速工具，看看是否会更好地适应您的环境。\n不使用加速工具： 如果问题无法解决，可能最好的方法是不使用网络加速工具，以避免潜在的网络通信问题。\n最终，为了确保通信的安全和稳定，建议使用经过验证和可信赖的网络通信方式，避免引入可能的不稳定因素。\nPicGo 官方文档中的相关 FAQ 在 PicGo 官方文档的 FAQ 中，也提到了一些关于 GitHub 图床上传的常见问题和解决方案，您也可以参考这些内容：\n7. GitHub 图床有时能上传，有时上传失败 GitHub 图床不支持上传同名文件，如果有同名文件上传，会报错。建议开启 时间戳重命名 避免同名文件。\nGitHub 服务器和国内 GFW 的问题会导致有时上传成功，有时上传失败，无解。想要稳定请使用付费云存储，如阿里云、腾讯云等，价格也不会贵。\n9. 上传失败，或者是服务器出错 PicGo 自带的图床都经过测试，上传出错一般都不是 PicGo 自身的原因。如果您用的是 GitHub 图床，请参考 FAQ 中的相关内容。\n检查 PicGo 的日志（报错日志可以在 PicGo 设置 -\u0026gt; 设置日志文件 -\u0026gt; 点击打开 后找到），看看 [PicGo Error] 的报错信息里有什么关键信息：\n先自行搜索 error 里的报错信息，往往您可以通过搜索引擎找到问题的原因，不必立即提交问题。\n如果报错信息带有 401、403 等 40X 状态码字样，不用怀疑，很可能是配置信息有误，仔细检查配置，确保没有多余的空格等。\n如果报错信息带有 HttpError、RequestError、socket hang up 等字样，说明这是网络问题。在这种情况下，您需要检查自己的网络，是否存在代理、DNS 设置是否正常等。\n通常情况下，上传失败很可能是因为网络问题导致的。如果您开启了系统代理，建议同时在 PicGo 的代理设置中设置对应的 HTTP 代理，详情请参考相关文档。\n通过我的研究和实践，我找到了解决这个 \u0026quot;unable to verify the first certificate\u0026quot; 问题的方法，也了解了一些关于 PicGo 的官方文档中提供的解决方案。希望这些信息能够帮助到您解决类似问题，确保您能够顺利地使用 PicGo 进行图床上传。如果您遇到了类似问题，不妨尝试我的解决方案，也可以参考官方文档中的相关内容，找到适合您的解决方法。\n资料参考 ","permalink":"https://eddyblog.cn/posts/tech/picgo_bug/","summary":"项目场景： 在使用 PicGo 进行图床上传时，出现了一个错误，具体的错误信息如下： [PicGo ERROR] { \u0026#34;method\u0026#34;: \u0026#34;PUT\u0026#34;, \u0026#34;statusCode\u0026#34;: 0, \u0026#34;message\u0026#34;: \u0026#34;unable to verify the first certificate\u0026#34;, \u0026#34;stack\u0026#34;: \u0026#34;Error: unable to verify the first certificate\\n\u0026#34; } 这个错误让我对图床上传产生了困惑，于是我进行了一些分析和研究，尝试找出问题的原因，并寻求解决方案。 问题描述： 在使用 PicGo 进行图床上传时，出现了一个与 SSL 证书验证相关的错误","title":"【图床工具】PicGo-bug日记-unable to verify the first certificate"},{"content":"前言 在本篇教程中，我们将为你详细介绍如何使用 GitHub、jsDelivr 和 PicGo 这三大工具，快速搭建一个高效、稳定的博客图床。通过优化图片加载方式，你不仅可以提升博客内容的展示效果，还能够加速网页加载速度，为读者呈现更好的阅读体验。\n图床的重要性 博客作为信息传播的重要途径，常常需要插入图片来更生动地展示内容。然而，直接将图片嵌入博客文章中可能导致博客服务器负担加重，进而影响网页的加载速度。这时，一个稳定的图床就显得尤为必要。\nGitHub：稳定的存储平台 首先，我们将利用GitHub作为图床的存储平台。GitHub的稳定性和可靠性已被广泛认可，尤其是在被微软收购后。它不仅提供免费的存储空间，还能够通过版本控制管理图片，确保你的图像资源安全可控。\njsDelivr：快速CDN加速 为了加速图片加载，我们将使用jsDelivr作为内容分发网络（CDN）。jsDelivr可以在全球范围内提供快速的图像传输，减少用户访问博客时的加载时间，提升用户体验。通过将GitHub存储的图片链接转换为jsDelivr链接，你可以轻松地为博客内容加速。\nPicGo：便捷的上传工具 为了简化上传过程，我们将使用PicGo，一个强大的上传工具。PicGo具备许多有用的功能，其中最引人注目的是剪贴板图片上传。当你在QQ或微信截取了图片后，只需点击剪贴板图片上传按钮，PicGo会自动将剪贴板中的图片上传到配置的图床中，并生成图片外链。这个便利的功能大大提高了图片上传的效率。\n搭建步骤 第一步：注册 GitHub 账号 首先，你需要注册一个 GitHub 账号。如果你还没有账号，现在就前往 GitHub 官网进行注册。\n第二步：创建 GitHub 仓库 登录你的 GitHub 账号，点击页面右上角的+按钮，选择New repository来创建一个新的仓库。这个仓库将用于存储你的博客图片资源。\n第三步：生成 GitHub Token 为了让 PicGo 能够上传图片至 GitHub仓库，我们需要生成一个 Token。前往 GitHub Settings 页面，点击左侧菜单中的Developer settings，然后选择Personal access tokens。点击Generate new token，并为它授予repo权限，然后翻到页面最底部，点击Generate token的绿色按钮生成token。\n第四步：安装并配置 PicGo PicGo官方指南：https://picgo.github.io/PicGo-Doc/zh/guide/#picgo-is-here\nPicGo安装包：https://github.com/Molunerfinn/PicGo/releases\n64位电脑下载PicGo-Setup-2.4.0-beta.4-x64.exe，下载最新版本即可。\n下载并安装 PicGo 工具。打开 PicGo，进入左侧的图床设置，选择GitHub图床。填入你的 GitHub 用户名和仓库名，将刚才生成的 Token 粘贴到对应位置。默认的分支名是main。\n{ \u0026#34;repo\u0026#34;: \u0026#34;\u0026#34;, // 仓库名，格式是username/reponame \u0026#34;token\u0026#34;: \u0026#34;\u0026#34;, // github token \u0026#34;path\u0026#34;: \u0026#34;\u0026#34;, // 自定义存储路径，比如img/ \u0026#34;customUrl\u0026#34;: \u0026#34;\u0026#34;, // 自定义域名，注意要加http://或者https:// \u0026#34;branch\u0026#34;: \u0026#34;\u0026#34; // 分支名，默认是main } 第五步：使用自定义域名 为了优化图片加载速度，我们将使用 jsDelivr 提供的 CDN 服务。在 PicGo 的 GitHub 图床设置中，设置自定义域名为：https://cdn.jsdelivr.net/gh/你的GitHub用户名/仓库名。\n第六步：上传图片并获取外链 现在，你可以使用 PicGo 强大的功能了。通过快捷键或剪贴板图片上传，将图片上传到你的 GitHub 仓库。PicGo 将自动为你生成图片外链，方便你插入到博客文章中。\n总结 通过 GitHub+jsDelivr+PicGo 的组合，你可以快速搭建一个高效、稳定的博客图床，提升博客内容的展示效果。无论你是新手还是老手，在这个教程的指引下，你都能轻松实现图床的搭建，为你的博客增色不少。希望你能在博客创作中享受更顺畅的图片管理和展示体验！\n感谢 PicGo官方指南：https://picgo.github.io/PicGo-Doc/zh/guide/#picgo-is-here\n","permalink":"https://eddyblog.cn/posts/tech/github_jsdelivr_picgo/","summary":"前言 在本篇教程中，我们将为你详细介绍如何使用 GitHub、jsDelivr 和 PicGo 这三大工具，快速搭建一个高效、稳定的博客图床。通过优化图片加载方式，你不仅可以提升博客内容的展示效果，还能够加速网页加载速度，为读者呈现更好的阅读体验。 图床的重要性 博客作为信息传播的重要途径，常常需要插","title":"【博客写作指南】GitHub+jsDelivr+PicGo搭建博客图床"},{"content":"1.增添博客封面 可以将博客封面存放在static/img下,然后引用\n--- cover: image: \u0026#34;https://eddyblog.cn/img/hugo.png\u0026#34; #图片路径：static/img/hugo.png caption: \u0026#34;\u0026#34; #图片底部描述 alt: \u0026#34;\u0026#34; relative: false --- 原本存放在static/img下的hugo.png经过hugo -F生成public目录后会存放在public/img下，所以这里的链接是https://eddyblog.cn/img/hugo.png\n原理分析：\n域名解析： 域名 eddyblog.cn 需要通过 DNS 解析将其映射到 GitHub Pages 的服务器 IP 地址。这样浏览器才能正确找到要请求的服务器。 GitHub Pages 服务器： 当浏览器发出请求时，DNS 解析后的请求会被路由到 GitHub Pages 的服务器。 资源请求： GitHub Pages 服务器接收到请求后，会寻找请求的资源。在这种情况下，服务器会尝试寻找 /img/hugo.png 路径下的图片资源。 资源响应： 如果服务器找到了请求的图片资源，它会将图片资源作为 HTTP 响应发送回浏览器。 渲染页面： 浏览器接收到图片资源的响应后，会将图片渲染到相应的位置，使其显示在您的博客页面中。 在这个过程中，您的博客域名需要正确解析到 GitHub Pages 的服务器，而您提供的图片链接则是相对于博客站点根目录的路径。这样，当浏览器加载页面时，它会根据提供的图片链接请求并显示相应的图片资源。 2.在博客正文中插入图片 利用自己的服务器加载图片 在 Hugo 的博客中，使用静态文件来存放图片并在 Markdown 中引用这些图片的方法如下：\n在 Hugo 博客源码的根目录下的 static 目录中创建一个名为 img 的子目录，用于存放需要引用的图片。这个目录结构应该类似于 static/img。\n将需要引用的图片放置在 static/img 目录下。\n在您的 Markdown 文件中，使用以下语法来引用本地图片：\n![](/img/1.png) 其中，/img/1.png 是图片在 static/img 目录下的相对路径。Hugo 在生成静态站点时会将 static 目录下的文件一并复制到最终生成的 public 文件夹中。\n这种方式确保您的图片会与生成的网页一同部署，并可以通过相对路径在 Markdown 文件中引用。\n利用图床加速加载图片 如何搭建图床请见该链接\n使用 GitHub、jsDelivr 和 PicGo 搭建博客图床是另一种常见的方式，它允许您将博客中使用的图片存储在 GitHub 仓库中，并通过 jsDelivr 加速服务来加载图片。\n以下是这种方式的一般步骤：\n创建 GitHub 仓库： 在 GitHub 上创建一个用于存储博客图片的仓库，您可以选择将仓库设置为公开或私有，根据您的需要。\n上传图片： 将博客中需要使用的图片上传到 GitHub 仓库中，您可以创建一个文件夹来组织图片。\n获取图片链接： 在 GitHub 仓库中，找到您上传的图片文件，点击文件查看，然后点击 \u0026ldquo;Download\u0026rdquo;（下载）按钮，复制浏览器地址栏中的链接。\n使用 jsDelivr 进行加速： 使用 jsDelivr 的 CDN 加速服务，将 GitHub 仓库中的图片链接进行加速。将 cdn.jsdelivr.net 加上 GitHub 仓库的用户名、仓库名和文件路径，形成类似以下的链接：\nhttps://cdn.jsdelivr.net/gh/用户名/仓库名/文件路径 这样就可以通过 jsDelivr 加速加载图片。\n使用 PicGo 进行上传： PicGo 是一个图床工具，可以帮助您批量上传图片到 GitHub 仓库，并自动生成图片链接。您可以在本地编辑 Markdown 文章时，使用 PicGo 快速上传图片并获取链接。\n在 Markdown 中引用图片： 使用获取到的加速链接，将图片引用插入到 Markdown 文件中。\n这种方式的优势在于，您可以将图片集中存储在 GitHub 仓库中，通过 CDN 加速服务来加载图片，提高图片加载速度。同时，使用 PicGo 可以简化图片上传和链接获取的过程。\n","permalink":"https://eddyblog.cn/posts/tech/hugo_insert_png/","summary":"1.增添博客封面 可以将博客封面存放在static/img下,然后引用 --- cover: image: \u0026#34;https://eddyblog.cn/img/hugo.png\u0026#34; #图片路径：static/img/hugo.png caption: \u0026#34;\u0026#34; #图片底部描述 alt: \u0026#34;\u0026#34; relative: false --- 原本存放在static/img下的hugo.png经过hugo -F生成public目录后会存放在public/img下，所以这","title":"【博客写作指南】如何在Hugo博客中巧妙运用照片"},{"content":"在博客世界中，第一印象往往决定了读者是否愿意深入阅读您的内容。而一个引人注目的封面图像就是制造这一第一印象的关键因素之一。无论您是一个技术大牛、旅行爱好者还是美食达人，一个精心设计的博客封面能够吸引读者、传达主题，并增加博客的可信度。本篇博客将为您提供一些关于创意封面设计与选择的指南，帮助您在博客写作中脱颖而出。\n为什么封面重要？ 博客封面是您博文的门面，它是吸引读者点击、浏览和分享的第一视觉元素。一个精美的封面可以：\n吸引眼球： 鲜明的颜色、独特的构图和视觉冲击力能够在浩瀚的信息中脱颖而出，吸引潜在读者的关注。\n传达主题： 封面图像应与您的博文主题相关，通过视觉元素传达核心内容，让读者迅速了解博文内容。\n增加可信度： 一个精心设计的封面能够给读者留下良好印象，增加博客的专业感和可信度。\n创意封面设计与选择 1. 自己创作： 如果您具备设计技能，不妨尝试自己创作一个独特的封面。使用设计工具如Adobe Photoshop、Canva等，您可以完全按照自己的想法打造一个与博文主题相关的封面。\n2. 免费图片库： 免费图片库提供了大量高质量的照片，可以轻松找到适合的封面图像。常用的免费图片库包括：\nUnsplash: 提供精美的高分辨率照片，涵盖多种主题。网址：https://unsplash.com/\nPexels: 提供高质量的免费照片和视频素材。网址：https://www.pexels.com/\nPixabay: 提供数百万张免费照片、插图和矢量图形。网址：https://pixabay.com/\nFreepik: 提供免费矢量图、照片和PSD文件。网址：https://www.freepik.com/\n在这些网站上，您可以使用关键词搜索相关的图片，然后选择适合的封面图片。\n3.付费图片库： 如果您愿意花费一些费用，付费图片库也提供高质量的图片资源。一些知名的付费图片库包括：\nShutterstock: 提供广泛的高质量图片、视频和音频素材。网址：https://www.shutterstock.com/\nGetty Images: 提供丰富的专业摄影和插图。网址：https://www.gettyimages.com/\nAdobe Stock: Adobe公司提供的付费图片库，包含多种类型的创意素材。网址：https://stock.adobe.com/\n在付费图片库中，您可以购买适合的图片版权，然后将其用作博客封面。\n4.使用照片编辑工具： 您可以使用照片编辑工具来自定义、修改和编辑图片，以满足您的封面需求。工具如 Adobe Photoshop、GIMP（免费）、Canva 等都可以帮助您进行图片编辑和设计。通过调整颜色、排列和添加文字等方式，将图片打造成符合博客风格的封面。\n5.自己拍摄照片： 如果您拥有照相机或手机，您还可以自己拍摄照片，然后将其作为博客封面。自己拍摄的照片能够为博客增加独特性和个性化，确保封面与您的内容紧密匹配。\n6.模板库： 有些网站提供博客封面的模板，您可以在这些网站上找到合适的模板并进行自定义。例如，Canva 提供了许多博客封面模板，您可以根据模板进行编辑和修改，节省设计时间。\n封面设计要点 简洁明了： 封面不宜过于复杂，简洁明了的设计更容易引起读者兴趣。\n色彩搭配： 色彩能够传达情感和主题，选择与博文内容相符的色彩搭配。\n字体选择： 如有文字内容，选择清晰易读的字体，并注意字号和排版。\n符合主题： 封面图像应与博文主题相关，能够迅速传达核心内容。\n结语 博客封面是博文的门面，能够在瞬间吸引读者的关注。通过创意封面设计与选择，您可以增加博客的可读性和可信度。无论您是创业者、学者、摄影师还是美食家，一个精心设计的封面都能够让您的博客更加引人注目。从免费图片库到自己的创作，选择适合自己的方法，让您的博客在浩瀚的网络中脱颖而出。愿您的创意封面为您的博文增色不少，吸引更多读者的关注和喜爱。\n","permalink":"https://eddyblog.cn/posts/tech/creative_cover_design_and_selection/","summary":"在博客世界中，第一印象往往决定了读者是否愿意深入阅读您的内容。而一个引人注目的封面图像就是制造这一第一印象的关键因素之一。无论您是一个技术大牛、旅行爱好者还是美食达人，一个精心设计的博客封面能够吸引读者、传达主题，并增加博客的可信度。本篇博客将为您提供一些关于创意封面设计与选择的","title":"博客写作指南：创意封面设计与选择"},{"content":" 在今天的互联网时代，网站速度不仅仅关乎用户体验，更关乎业务的成功。本文将为您介绍如何利用Pingdom工具测试和提升网站速度，以实现更好的性能和用户满意度。\n为何网站速度至关重要？ 在一个信息传递迅速的世界中，用户对于网站速度的期待也不断增加。快速加载的网站不仅能够提供更好的用户体验，还有助于减少用户的流失率，提高页面的转化率。根据统计数据，用户通常只会等待2-3秒钟来加载网页，超过这个时间，他们可能就会离开。\n使用Pingdom测试网站速度 Pingdom是一个广泛使用的网站性能监测工具，它可以帮助您了解您的网站在全球不同地区的加载速度，并提供详细的性能报告。以下是使用Pingdom测试网站速度的步骤：\n访问Pingdom网站： 打开Pingdom的官方网站（https://www.pingdom.com）并注册一个账户。\n添加监测目标： 在Pingdom仪表板中，点击“Add New Check”按钮，输入您的网站URL以及测试的地区。\n运行测试： 点击“Start Test”按钮，Pingdom将会模拟不同地区的用户来测试您的网站加载速度，并生成详细的性能报告。\n分析报告： 在报告中，您可以看到各个地区的加载时间、性能分数以及建议的优化措施。\n网站速度优化实例 以下是一个实际案例，展示了如何利用Pingdom测试和提升网站速度的过程：\n案例：ABC在线商城\nABC在线商城是一个电子商务网站，用户抱怨加载速度较慢，导致页面反应迟缓，影响购物体验和转化率。通过Pingdom测试，发现网站在美国地区的加载时间较长。\n优化步骤：\n压缩图像： 优化网站中的图片，使用适当的压缩工具，以减少页面加载时间。\n启用浏览器缓存： 配置服务器以启用浏览器缓存，以减少重复加载的内容。\n使用CDN： 使用内容分发网络（CDN）来分发网站的静态资源，加速页面加载。\n减少HTTP请求： 合并和减少网站的HTTP请求，从而加快页面的加载速度。\n优化代码： 优化网站的HTML、CSS和JavaScript代码，减少不必要的代码和空格。\n移除不必要的插件： 移除不必要的第三方插件和工具，以减少页面加载的负担。\n结果： 经过优化后，ABC在线商城的网站加载速度在Pingdom测试中有了显著的提升。用户体验得到改善，页面加载时间缩短，转化率也有所增加。\n结论 通过利用Pingdom工具测试和提升网站速度，您可以获得关于网站性能的深入了解，并采取适当的措施来改进用户体验和业务成功。网站速度优化不仅仅是技术问题，更关乎用户满意度和业务增长，务必引起足够的重视。通过上述案例研究，我们可以看到网站速度优化的实际效果，这将为您在实践中提供有力的指导。\n","permalink":"https://eddyblog.cn/posts/tech/website_speed_optimization/","summary":"在今天的互联网时代，网站速度不仅仅关乎用户体验，更关乎业务的成功。本文将为您介绍如何利用Pingdom工具测试和提升网站速度，以实现更好的性能和用户满意度。 为何网站速度至关重要？ 在一个信息传递迅速的世界中，用户对于网站速度的期待也不断增加。快速加载的网站不仅能够提供更好的用户体验","title":"网站速度优化：利用Pingdom测试与提升"},{"content":" 提升用户体验，优化网站性能，提高访问速度\n在当今数字化时代，网站性能对于吸引用户、提升用户体验以及搜索引擎排名至关重要。一个快速加载的网站不仅可以减少用户的等待时间，还能够增加转化率，降低跳失率，并为您的品牌树立积极的形象。但是，要实现高性能的网站，并不仅仅是优化代码和图像，更需要系统性地评估和改进。在本文中，我们将介绍如何使用 PageSpeed Insights 工具来评估网站性能，并提供一些改进策略，帮助您优化网站加载速度。\n什么是 PageSpeed Insights？ PageSpeed Insights 是由 Google 提供的一款免费工具，用于评估网站的性能并提供改进建议。该工具会分析网站的页面加载速度，并根据不同的指标为网站打分，同时还会提供详细的性能优化建议。这些建议可以帮助您发现潜在的性能瓶颈，改进加载速度，从而提升用户体验。\n如何使用 PageSpeed Insights？ 使用 PageSpeed Insights 非常简单，您只需前往其官方网站（https://developers.google.com/speed/pagespeed/insights/），输入您要评估的网站 URL，然后点击“分析”按钮即可。PageSpeed Insights 将对您的网站进行分析，然后为您提供两个关键指标的分数：移动设备性能和桌面设备性能。每个指标的分数范围从 0 到 100，分数越高表示性能越好。\n优化建议与策略 PageSpeed Insights 不仅会给出分数，还会提供详细的优化建议和策略。以下是一些常见的优化策略，可帮助您改进网站性能：\n1. 图片优化 图像是网站加载速度的主要因素之一。使用适当的图片格式（如 WebP）并进行压缩，可以显著减少加载时间。另外，使用响应式图像，根据不同设备加载不同分辨率的图像，可以进一步优化性能。\n2. 延迟加载 采用延迟加载（Lazy Loading）技术，只加载当前用户可见区域的内容，而不是一次性加载整个页面。这可以加速页面的首次加载，尤其对于长页面或包含大量图像的页面特别有效。\n3. 浏览器缓存 启用浏览器缓存可以减少重复加载已访问过的资源，从而提高页面加载速度。通过设置适当的缓存策略，可以使用户在再次访问页面时能够从本地缓存加载资源，而不必再次下载。\n4. 压缩代码 压缩 HTML、CSS 和 JavaScript 代码可以减小文件大小，从而加快文件传输速度。许多服务器和工具都提供代码压缩功能，您只需将压缩后的文件上传到服务器即可。\n5. 移除不必要的资源 定期审查您的网站，移除不再使用的资源，如无用的插件、样式表或脚本。减少请求的资源数量可以显著减少页面加载时间。\n真实案例：XYZ 公司的网站性能优化 为了更好地理解如何使用 PageSpeed Insights 进行网站性能优化，让我们看一个真实案例。XYZ 公司的网站在使用 PageSpeed Insights 后，发现移动设备性能分数\n仅为 50，而桌面设备性能分数为 75。经过分析，他们发现以下问题和改进方案：\n图片未经优化： 网站中的图片过大，没有经过压缩和优化。他们采用了图片压缩工具，将图片大小减小了 50%，从而提高了页面加载速度。\n缺少延迟加载： 网站一次性加载了所有图片，导致页面加载时间较长。他们引入了延迟加载技术，只加载用户可见区域的图片，从而减少了首次加载时间。\n缺少浏览器缓存： 网站未启用浏览器缓存，导致用户每次访问都需要重新下载资源。他们设置了适当的缓存策略，使用户能够从本地缓存加载资源，加快了页面加载速度。\n通过以上改进，XYZ 公司的网站性能得到了显著提升，移动设备性能分数达到了 85，桌面设备性能分数达到了 90。用户体验得到了明显改善，页面加载速度大幅提升。\n案例研究：ABC 博客的性能优化之路 ABC 博客是一个知名的技术博客，但近期用户抱怨网站加载速度较慢。博客团队使用 PageSpeed Insights 进行了评估，并发现移动设备性能分数仅为 40，桌面设备性能分数为 60。为了改进性能，他们采取了以下措施：\n压缩资源： 博客中存在大量的 CSS 和 JavaScript 文件，占用了大量带宽。他们对这些文件进行了压缩，并启用了 Gzip 压缩，从而减小了文件大小。\n使用 CDN： 为了加速资源加载，他们将静态资源（如图片、样式表和脚本）托管到了 CDN 上，减少了服务器的负载，加快了资源传输速度。\n减少重定向： 博客中存在多个重定向链接，导致额外的网络请求。他们对重定向链接进行了优化，减少了网络请求次数。\n通过以上改进，ABC 博客的性能得到了显著提升，移动设备性能分数达到了 70，桌面设备性能分数达到了 85。用户体验得到了显著改善，网站加载速度明显加快。\n总结 优化网站性能是提升用户体验、提高转化率以及提升搜索引擎排名的关键步骤。通过使用 PageSpeed Insights 评估网站性能，并采取针对性的优化策略，您可以显著提升网站的加载速度，为用户创造更好的访问体验。通过真实案例和案例研究，我们可以看到优化策略如何在实际中产生积极影响，帮助网站实现高性能和优异的用户体验。\n小提示： 不断关注网站性能，定期使用 PageSpeed Insights 进行评估和改进，是确保网站保持高性能状态的关键。通过不断优化，您可以为用户提供更快、更流畅的访问体验，从而提升网站的价值和竞争力。\n","permalink":"https://eddyblog.cn/posts/tech/optimize_website_performance/","summary":"提升用户体验，优化网站性能，提高访问速度 在当今数字化时代，网站性能对于吸引用户、提升用户体验以及搜索引擎排名至关重要。一个快速加载的网站不仅可以减少用户的等待时间，还能够增加转化率，降低跳失率，并为您的品牌树立积极的形象。但是，要实现高性能的网站，并不仅仅是优化代码和图像，更需要","title":"优化网站性能：使用PageSpeed Insights评估与改进"},{"content":"前言 利用windows系统的tree命令生成文件夹目录下的树形结构，并倒入至markdown。\n一、tree是什么？ 示例：pandas 是基于NumPy 的一种工具，该工具是为了解决数据分析任务而创建的。\n二、使用步骤 1.在想要生成树形结构的文件夹目录下运行powershell，输入命令tree 输入命令tree生成树形目录（示例）：\n卷 Data 的文件夹 PATH 列表 卷序列号为 E84E-7569 D:. ├─.idea ├─archetypes ├─assets │ ├─css │ │ └─extended │ └─js ├─content │ ├─posts │ │ ├─art │ │ ├─projects │ │ └─tech │ │ └─tech1 │ └─tags ├─data ├─i18n ├─layouts │ ├─partials │ │ └─templates │ ├─shortcodes │ └─_default │ └─_markup ├─public │ ├─assets │ │ ├─css │ │ └─js │ ├─en │ │ ├─about │ │ ├─archives │ │ ├─categories │ │ ├─posts │ │ │ ├─art │ │ │ │ ├─art │ │ │ │ └─page │ │ │ │ └─1 │ │ │ ├─page │ │ │ │ └─1 │ │ │ ├─projects │ │ │ │ ├─page │ │ │ │ │ └─1 │ │ │ │ └─projects │ │ │ └─tech │ │ │ ├─page │ │ │ │ └─1 │ │ │ ├─tech │ │ │ └─tech1 │ │ ├─search │ │ ├─series │ │ └─tags │ │ ├─art │ │ │ └─page │ │ │ └─1 │ │ ├─projects │ │ │ └─page │ │ │ └─1 │ │ └─tech │ │ └─page │ │ └─1 │ ├─fonts │ └─img ├─resources │ └─_gen │ ├─assets │ └─images ├─static │ ├─fonts │ └─img └─themes └─hugo-PaperMod ├─.github │ ├─ISSUE_TEMPLATE │ └─workflows ├─assets │ ├─css │ │ ├─common │ │ ├─core │ │ ├─extended │ │ ├─hljs │ │ └─includes │ └─js ├─i18n ├─images └─layouts ├─partials │ └─templates ├─shortcodes └─_default └─_markup 2.输入命令tree \u0026gt; tree.txt保存生成的树形目录至当前文件夹目录下的tree.txt 3.复制粘贴至markdown文件 在markdown使用```开启代码块，将复制的树形目录粘贴在代码块处\n├─.idea ├─archetypes ├─assets │ ├─css │ │ └─extended │ └─js ├─content │ ├─posts │ │ ├─art │ │ ├─projects │ │ └─tech │ │ └─tech1 │ └─tags ├─data ├─i18n ├─layouts │ ├─partials │ │ └─templates │ ├─shortcodes │ └─_default │ └─_markup ├─public │ ├─assets │ │ ├─css │ │ └─js │ ├─en │ │ ├─about │ │ ├─archives │ │ ├─categories │ │ ├─posts │ │ │ ├─art │ │ │ │ ├─art │ │ │ │ └─page │ │ │ │ └─1 │ │ │ ├─page │ │ │ │ └─1 │ │ │ ├─projects │ │ │ │ ├─page │ │ │ │ │ └─1 │ │ │ │ └─projects │ │ │ └─tech │ │ │ ├─page │ │ │ │ └─1 │ │ │ ├─tech │ │ │ └─tech1 │ │ ├─search │ │ ├─series │ │ └─tags │ │ ├─art │ │ │ └─page │ │ │ └─1 │ │ ├─projects │ │ │ └─page │ │ │ └─1 │ │ └─tech │ │ └─page │ │ └─1 │ ├─fonts │ └─img ├─resources │ └─_gen │ ├─assets │ └─images ├─static │ ├─fonts │ └─img └─themes └─hugo-PaperMod ├─.github │ ├─ISSUE_TEMPLATE │ └─workflows ├─assets │ ├─css │ │ ├─common │ │ ├─core │ │ ├─extended │ │ ├─hljs │ │ └─includes │ └─js ├─i18n ├─images └─layouts ├─partials │ └─templates ├─shortcodes └─_default └─_markup 总结 本文简单介绍了windows系统下tree命令的使用，tree命令可以生成文件夹目录下的树形结构，并倒入至markdown。\n","permalink":"https://eddyblog.cn/posts/tech/hugo_introduce_a_tree_directory/","summary":"前言 利用windows系统的tree命令生成文件夹目录下的树形结构，并倒入至markdown。 一、tree是什么？ 示例：pandas 是基于NumPy 的一种工具，该工具是为了解决数据分析任务而创建的。 二、使用步骤 1.在想要生成树形结构的文件夹目录下运行powershell，输入命令","title":"【Hugo】markdown引入树状目录"},{"content":"前言 下载哪种架构的安装包取决于你的计算机处理器架构。通常，大多数桌面和笔记本电脑使用的是x86_64或简称为amd64架构，因此你应该下载针对该架构的安装包\nAMD 如果你的电脑使用的是x86_64或amd64架构，那么下载x86_64或amd64架构的安装包。\nARM 如果你的计算机是ARM设备，例如某些Raspberry Pi设别或其他ARM架构的计算机，那么你应该下载适用于ARM架构的安装包\n确定处理器架构 要确定你的计算机的处理器架构，可以执行一些操作，例如在命令行中输入uname -m（对于大多数Linux系统），或者在Windows上通过\u0026quot;系统信息\u0026quot;来查看处理器信息。\n总之，下载与你计算机处理器架构匹配的安装包是确保软件能够正常运行的重要一步。\n","permalink":"https://eddyblog.cn/posts/tech/github_amd_arm/","summary":"前言 下载哪种架构的安装包取决于你的计算机处理器架构。通常，大多数桌面和笔记本电脑使用的是x86_64或简称为amd64架构，因此你应该下载针对该架构的安装包 AMD 如果你的电脑使用的是x86_64或amd64架构，那么下载x86_64或amd64架构的安装包。 ARM 如果你的计算机是ARM设","title":"【Github】release上的安装包amd和arm的选择"},{"content":"项目场景 Hugo\n问题描述 在本地博客源码目录下进行hugo server 失败，无法进入 http://localhost:1313/\n原因分析 假如修改过\u0026quot;themes\\hugo-PaperMod\u0026quot;的话，那么可能是\u0026quot;themes\\hugo-PaperMod\u0026quot;出现了问题\n解决方案 将\u0026quot;themes\\hugo-PaperMod\u0026quot;删除，在hugo-PaperMod的Github主页重新下载一次主题并放在\u0026quot;themes\\\u0026quot;目录下，重新hugo server一次\n建议对PaperMod主题做自定义修改的话，最好在博客源码目录下修改，而不是在\u0026quot;themes\\hugo-PaperMod\u0026quot;修改\n这是博客源码目录：\n卷 Data 的文件夹 PATH 列表 卷序列号为 E84E-7569 D:. ├─.idea ├─archetypes ├─assets │ ├─css │ │ └─extended │ └─js ├─content │ ├─posts │ │ ├─art │ │ ├─projects │ │ └─tech │ │ └─tech1 │ └─tags ├─data ├─i18n ├─layouts │ ├─partials │ │ └─templates │ ├─shortcodes │ └─_default │ └─_markup ├─public │ ├─assets │ │ ├─css │ │ └─js │ ├─en │ │ ├─about │ │ ├─archives │ │ ├─categories │ │ ├─posts │ │ │ ├─art │ │ │ │ ├─art │ │ │ │ └─page │ │ │ │ └─1 │ │ │ ├─page │ │ │ │ └─1 │ │ │ ├─projects │ │ │ │ ├─page │ │ │ │ │ └─1 │ │ │ │ └─projects │ │ │ └─tech │ │ │ ├─page │ │ │ │ └─1 │ │ │ ├─tech │ │ │ └─tech1 │ │ ├─search │ │ ├─series │ │ └─tags │ │ ├─art │ │ │ └─page │ │ │ └─1 │ │ ├─projects │ │ │ └─page │ │ │ └─1 │ │ └─tech │ │ └─page │ │ └─1 │ ├─fonts │ └─img ├─resources │ └─_gen │ ├─assets │ └─images ├─static │ ├─fonts │ └─img └─themes └─hugo-PaperMod ├─.github │ ├─ISSUE_TEMPLATE │ └─workflows ├─assets │ ├─css │ │ ├─common │ │ ├─core │ │ ├─extended │ │ ├─hljs │ │ └─includes │ └─js ├─i18n ├─images └─layouts ├─partials │ └─templates ├─shortcodes └─_default └─_markup ","permalink":"https://eddyblog.cn/posts/tech/hugo_server_failed/","summary":"项目场景 Hugo 问题描述 在本地博客源码目录下进行hugo server 失败，无法进入 http://localhost:1313/ 原因分析 假如修改过\u0026quot;themes\\hugo-PaperMod\u0026quot;的话，那么可能是\u0026quot;themes\\hugo-PaperMod\u0026quot;出现了问题 解决方案 将\u0026quot;themes\\hu","title":"【Hugo】bug日记-hugo server失败"},{"content":"前言 VMware自带的VMware Tools复制粘贴功能失败，所以安装open-vm-tools以使用复制粘贴功能。\n一、open-vm-tools是什么？ open-vm-tools 是一组用于 VMware 虚拟机中的开源工具，它们提供了一些与虚拟机操作和管理相关的功能。这些工具与 VMware 虚拟化平台集成，可以在虚拟机中提供更好的性能和功能。以下是一些 open-vm-tools 提供的功能：\n虚拟机增强功能： open-vm-tools 提供了与 VMware 虚拟化平台集成的增强功能，例如拖放文件、共享剪贴板、虚拟机自适应大小等。\n虚拟机信息获取： 这些工具可以提供有关虚拟机配置、硬件和操作系统的信息，使你可以更好地监控和管理虚拟机。\n时钟同步： open-vm-tools 可以帮助虚拟机与虚拟化主机进行时钟同步，确保虚拟机时间与主机时间保持一致。\n电源管理： 这些工具允许你在虚拟机中进行电源管理操作，如重启、关机等。\n性能优化： open-vm-tools 可以与虚拟化平台一起工作，优化虚拟机的性能，提供更好的资源管理和协作。\n注意，open-vm-tools 适用于许多 Linux 发行版，并提供了虚拟机操作和管理方面的许多便利功能。如果你在 VMware 虚拟机中运行 Linux 操作系统，可以考虑安装和使用这些工具来提升虚拟机的性能和功能。安装 open-vm-tools 的方法可能会因你使用的 Linux 发行版而有所不同，通常你可以在操作系统的软件仓库中找到它。\n二、操作步骤 删除VMware-tools 判断自己的VMware是否安装了VMware tools\n如图，显示“重新安装VMware tools”则说明已经安装了VMware tools，然后执行以下命令删除VMware tools\nsudo vmware-uninstall-tools.pl sudo rm -rf /usr/lib/vmware-tools sudo apt-get autoremove open-vm-tools --purge 如果没安装过VMware tools则忽略第一步，直接进入第二步。\n安装 open-vm-tools sudo apt-get install open-vm-tools sudo apt-get install open-vm-tools-desktop 安装完成后，重启虚拟机即可使用复制粘贴功能。\nWindows系统中复制粘贴快捷键是 ctrl+c ctrl+v\nLinux系统中复制粘贴快捷键是 shift+ctrl+c shift+ctrl+v\n文件复制粘贴功能需使用鼠标右键，而不能直接使用快捷键。\n","permalink":"https://eddyblog.cn/posts/tech/linux_vmware_copy_and_paste/","summary":"前言 VMware自带的VMware Tools复制粘贴功能失败，所以安装open-vm-tools以使用复制粘贴功能。 一、open-vm-tools是什么？ open-vm-tools 是一组用于 VMware 虚拟机中的开源工具，它们提供了一些与虚拟机操作和管理相关的功能。这些工具与 VMware 虚拟化平台集成，可以在虚拟机中提供更","title":"【Linux】vmware实现复制粘贴功能"},{"content":"前言 Hugo博客源码根目录下的static目录是用来存放一些静态文件的（包括图片），执行hugo -F生成的public文件夹，会将static目录下的文件一并导入至public文件夹，并最终呈现至服务器网页上。\n所以想要在markdown里引用本地图片，那么就在根目录的static目录下存放图片，并在mardown里引用就可以了。\n操作步骤 1.在static目录下创建img子目录 将需要引用的图片都放在static/img下。\n2.在markdown里引用本地图片 如想在markdown里引用1.png，那么就在markdown里输入\n![](/img/1.png) ","permalink":"https://eddyblog.cn/posts/tech/hugo_referencing_local_images/","summary":"前言 Hugo博客源码根目录下的static目录是用来存放一些静态文件的（包括图片），执行hugo -F生成的public文件夹，会将static目录下的文件一并导入至public文件夹，并最终呈现至服务器网页上。 所以想要在markdown里引用本地图片，那么就在根目录的static","title":"【Hugo】markdown引用本地图片"},{"content":"前言 建议将博客源码和构建的静态页面分别放在两个仓库里。\n操作步骤 1.博客源码（Github仓库） 私有仓库Yourname-Blog（注意Github仓库命名规范）存放博客源码。（也可以是一个公开的仓库，相当于为他人提供了一个博客模板）\n├─.idea ├─archetypes ├─assets │ ├─css │ │ └─extended │ └─js ├─content │ ├─posts │ │ ├─art │ │ ├─projects │ │ └─tech │ │ └─cover │ └─tags ├─data ├─i18n ├─layouts │ ├─partials │ │ └─templates │ ├─shortcodes │ └─_default │ └─_markup ├─public │ ├─assets │ │ ├─css │ │ └─js │ ├─en │ │ ├─about │ │ ├─archives │ │ ├─categories │ │ ├─posts │ │ │ ├─art │ │ │ │ ├─art │ │ │ │ └─page │ │ │ │ └─1 │ │ │ ├─page │ │ │ │ └─1 │ │ │ ├─projects │ │ │ │ ├─page │ │ │ │ │ └─1 │ │ │ │ └─projects │ │ │ └─tech │ │ │ ├─page │ │ │ │ └─1 │ │ │ ├─tech │ │ │ └─tech1 │ │ ├─search │ │ ├─series │ │ └─tags │ │ ├─art │ │ │ └─page │ │ │ └─1 │ │ ├─projects │ │ │ └─page │ │ │ └─1 │ │ └─tech │ │ └─page │ │ └─1 │ ├─fonts │ └─img ├─resources │ └─_gen │ ├─assets │ └─images ├─static │ ├─fonts │ └─img └─themes └─hugo-PaperMod ├─.github │ ├─ISSUE_TEMPLATE │ └─workflows ├─assets │ ├─css │ │ ├─common │ │ ├─core │ │ ├─extended │ │ ├─hljs │ │ └─includes │ └─js ├─i18n ├─images └─layouts ├─partials │ └─templates ├─shortcodes └─_default └─_markup 2.静态页面（Github仓库） 公有仓库yourname.github.io存放构建的静态页面。\n将构建的静态页面，即public/目录下的内容上传到仓库yourname.github.io ，yourname.github.io会自动绑定Github pages , 就可以通过网址yourname.github.io访问部署好的博客。\n├─assets │ ├─css │ └─js ├─en │ ├─about │ ├─archives │ ├─categories │ ├─posts │ │ ├─art │ │ │ ├─art │ │ │ └─page │ │ │ └─1 │ │ ├─page │ │ │ └─1 │ │ ├─projects │ │ │ ├─page │ │ │ │ └─1 │ │ │ └─projects │ │ └─tech │ │ ├─page │ │ │ └─1 │ │ ├─tech │ │ └─tech1 │ ├─search │ ├─series │ └─tags │ ├─art │ │ └─page │ │ └─1 │ ├─projects │ │ └─page │ │ └─1 │ └─tech │ └─page │ └─1 ├─fonts └─img 总结 本文简单介绍了Hugo框架下在Github仓库分别储存博客源码和静态页面的操作步骤和方法。\n","permalink":"https://eddyblog.cn/posts/tech/hugo_saving_source_code/","summary":"前言 建议将博客源码和构建的静态页面分别放在两个仓库里。 操作步骤 1.博客源码（Github仓库） 私有仓库Yourname-Blog（注意Github仓库命名规范）存放博客源码。（也可以是一个公开的仓库，相当于为他人提供了一个博客模板） ├─.idea ├─archetypes ├─ass","title":"【Hugo】在Github仓库分别储存博客源码和静态页面"},{"content":"项目场景： Git bash\n问题描述1： 在错误的目录使用git init初始化了一个仓库，此时应该将该仓库删除\n解决方案1： 使用ls -a 命令显示隐藏文件夹和文件，检查该目录下是否有.git文件夹\n发现该目录下含有.git文件夹，使用rm -rf .git删除.git文件夹，同时本地仓库也会被销毁\n问题描述2： 将本地仓库关联到错误的远程仓库，此时应该将该关联删除\n解决方案2： 查看本地仓库关联的远程仓库名称及URL git remote -v 确认关联的错误远程仓库之后，删除关联 git remote remove \u0026lt;远程仓库名称\u0026gt; ","permalink":"https://eddyblog.cn/posts/tech/github_delete_wrong_repository/","summary":"项目场景： Git bash 问题描述1： 在错误的目录使用git init初始化了一个仓库，此时应该将该仓库删除 解决方案1： 使用ls -a 命令显示隐藏文件夹和文件，检查该目录下是否有.git文件夹 发现该目录下含有.git文件夹，使用rm -rf .git删除.git文件夹，同时本地仓库也会被销毁 问题描述2： 将","title":"【Github】bug日记-删除本地仓库/错误的远程仓库关联"},{"content":"hello\nD:. ├─.idea ├─archetypes ├─assets │ ├─css │ │ └─extended │ └─js ├─content │ ├─posts │ │ ├─art │ │ ├─blog │ │ ├─life │ │ ├─projects │ │ ├─read │ │ └─tech │ │ └─tech1 │ └─tags ├─data ├─i18n ├─layouts │ ├─partials │ │ └─templates │ ├─shortcodes │ └─_default │ └─_markup ├─resources │ └─_gen │ ├─assets │ └─images ├─static │ ├─fonts │ └─img └─themes └─hugo-PaperMod ├─.github │ ├─ISSUE_TEMPLATE │ └─workflows ├─assets │ ├─css │ │ ├─common │ │ ├─core │ │ ├─extended │ │ ├─hljs │ │ └─includes │ └─js ├─i18n ├─images └─layouts ├─partials │ └─templates ├─shortcodes └─_default └─_markup ","permalink":"https://eddyblog.cn/posts/art/art/","summary":"hello D:. ├─.idea ├─archetypes ├─assets │ ├─css │ │ └─extended │ └─js ├─content │ ├─posts │ │ ├─art │ │ ├─blog │ │ ├─life │ │ ├─projects │ │ ├─read │ │ └─tech │ │ └─tech1 │ └─tags ├─da","title":"Art"},{"content":"","permalink":"https://eddyblog.cn/posts/projects/projects/","summary":"","title":"Projects"},{"content":"项目场景： Git bash\n问题描述： 进行git remote add origin https://github.com/你的用户名/你的用户名.github.io.git命令时\n出现错误：error: remote origin already exists\n原因分析： 与本地仓库关联的远程仓库已经存在，无法进行新的关联\n解决方案： 删除已关联的远程库 git remote rm origin 关联正确的远程仓库 git remote add origin https://github.com/你的用户名/你的用户名.github.io.git 推送到正确的仓库 git push -f origin main ","permalink":"https://eddyblog.cn/posts/tech/github_error_remote_origin_already_exists/","summary":"项目场景： Git bash 问题描述： 进行git remote add origin https://github.com/你的用户名/你的用户名.github.io.git命令时 出现错误：error: remote origin already exists 原因分析： 与本地仓库关联的远程仓库已经存在，无法进行新的关联 解决方案： 删除已关联的远程库 git remote rm origin 关联正确的远程仓库 git","title":"【Github】bug日记-git remote"},{"content":"前言 Hugo添加不蒜子Busuanzi页面浏览次数与阅读数据统计\n一、Busuanzi是什么？ Busuanzi是一个用于统计网站访问量的工具。它通常嵌入到网页中，可以追踪页面的浏览次数，方可数量积极其他一些基本的访问数据。这个工具可以帮助网站管理员了解他们的网站受欢迎程度和流量情况。\n二、使用步骤 在head.html，footer.html，single.html，config.yml进行修改\nhead.html 我的papermod的路径为themes/Hugo-PaperMod/layouts/partials/head.html\n添加以下代码\n\u0026lt;!-- busuanzi --\u0026gt; {{- if .Site.Params.busuanzi.enable -}} \u0026lt;script async src=\u0026#34;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;meta name=\u0026#34;referrer\u0026#34; content=\u0026#34;no-referrer-when-downgrade\u0026#34;\u0026gt; {{- end -}} footer.html 用于在站点底部显示总访问量与访客数\n我的PaperMod路径为themes/Hugo-PaperMod/layouts/partials/footer.html\n添加以下代码，注意添加在\u0026lt;footer\u0026gt;代码块里\n\u0026lt;!-- busuanzi --\u0026gt; {{ if .Site.Params.busuanzi.enable -}} \u0026lt;div class=\u0026#34;busuanzi-footer\u0026#34;\u0026gt; \u0026lt;span id=\u0026#34;busuanzi_container_site_pv\u0026#34;\u0026gt; 本站总访问量\u0026lt;span id=\u0026#34;busuanzi_value_site_pv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;次 \u0026lt;/span\u0026gt; \u0026lt;span id=\u0026#34;busuanzi_container_site_uv\u0026#34;\u0026gt; 本站访客数\u0026lt;span id=\u0026#34;busuanzi_value_site_uv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;人次 \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; {{- end -}} single.html 用于显示每篇文章阅读量\n我的papermod路径为themes/Hugo-PaperMod/layouts/_default/single.html\n添加以下代码，加在\u0026lt;header\u0026gt;代码块内\n\u0026lt;!-- busuanzi --\u0026gt; {{ if .Site.Params.busuanzi.enable -}} \u0026lt;div class=\u0026#34;meta-item\u0026#34;\u0026gt;\u0026amp;nbsp·\u0026amp;nbsp \u0026lt;span id=\u0026#34;busuanzi_container_page_pv\u0026#34;\u0026gt;本文阅读量\u0026lt;span id=\u0026#34;busuanzi_value_page_pv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;次\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; {{- end }} config.yml 回到根目录的config.yml，在params里加上busuanzi:功能\n显示统计即为true\nparams: busuanzi: enable: true 不想显示统计即为false\nparams: busuanzi: enable: false 总结 本文简单介绍了Hugo添加不蒜子Busuanzi站点访问量与阅读量统计的操作步骤和方法。\n","permalink":"https://eddyblog.cn/posts/tech/hugo_busuanzi/","summary":"前言 Hugo添加不蒜子Busuanzi页面浏览次数与阅读数据统计 一、Busuanzi是什么？ Busuanzi是一个用于统计网站访问量的工具。它通常嵌入到网页中，可以追踪页面的浏览次数，方可数量积极其他一些基本的访问数据。这个工具可以帮助网站管理员了解他们的网站受欢迎程度和流量情况","title":"【Hugo】添加不蒜子Busuanzi页面浏览次数与阅读数据统计"},{"content":"项目场景： Git bash\n问题描述： 进行git push -f origin master命令\n出现错误：fatal: unable to access ' 我的库的http路径 ': OpenSSL SSL_read: Connection was reset, errno 10054\n原因分析： 无法关联github的远程库,SSL连接被重置\n解决方案： 使用命令行解除SSL认证\ngit config --global http.sslVerify \u0026#34;false\u0026#34; git config --global https.sslVerify \u0026#34;false\u0026#34; ","permalink":"https://eddyblog.cn/posts/tech/gitub_error1/","summary":"项目场景： Git bash 问题描述： 进行git push -f origin master命令 出现错误：fatal: unable to access ' 我的库的http路径 ': OpenSSL SSL_read: Connection was reset, errno 10054 原因分析： 无法关联github的远程库,SSL连接被重置 解决方案： 使用命令行解除SSL认证 git config --global http.sslVerify \u0026#34;false\u0026#34; git config --global https.sslVerify \u0026#34;false\u0026#34;","title":"【Github】bug日记-OpenSSL SSL_read"},{"content":"前言： Git bash本地常用指令是默认上传到远程仓库的master分支，而实际上我们应该将文件传入到main主分支\n使用步骤： 假如是将远程库master分支合并到main分支，那么要先将远程仓库克隆到本地\ngit clone xxx.git 将本地的master分支合并到远程的main分支，则上个步骤不用做\n在本地master分支的文件夹目录，创建并切换至main分支 git checkout -b main 推送至main主分支 git push origin main 删除本地master分支（假如本地仓库还要使用的话，最好先不要删除） git branch -d master 删除远程master分支 git push origin :master ","permalink":"https://eddyblog.cn/posts/tech/github_merge_the_master_branch_into_the_main_branch/","summary":"前言： Git bash本地常用指令是默认上传到远程仓库的master分支，而实际上我们应该将文件传入到main主分支 使用步骤： 假如是将远程库master分支合并到main分支，那么要先将远程仓库克隆到本地 git clone xxx.git 将本地的master分支合并到远程的main分支，则上个步骤不用做 在本地ma","title":"【Github】将仓库中的master分支合并到main分支"},{"content":"前言： Hugo使用Chroma插件进行代码高亮。\nChroma: Hugo 在 v0.65.0 版本之后使用了 Chroma 代码高亮插件，它是一个 Go 语言实现的非常漂亮并能快速生成的代码高亮工具。\n操作步骤： 默认的代码高亮配置文件如下，你可以复制到你的配置文件config.yml内进行修改：\nyaml 格式的配置文件：\nmarkup: highlight: codeFences: true guessSyntax: false hl_Lines: \u0026#34;\u0026#34; lineNoStart: 1 lineNos: false lineNumbersInTable: true noClasses: true style: monokai tabWidth: 4 toml 格式的配置文件：\n[markup] [markup.highlight] anchorLineNos = false codeFences = true guessSyntax = true hl_Lines = \u0026#34;\u0026#34; lineAnchors = \u0026#34;\u0026#34; lineNoStart =1 lineNos = true lineNumbersInTable = true noClasses = true style = \u0026#34;monokai\u0026#34; tabWidth = 4 json 格式的配置文件：\n{ \u0026#34;markup\u0026#34;:{ \u0026#34;highlight\u0026#34;:{ \u0026#34;codeFences\u0026#34;:true, \u0026#34;guessSyntax\u0026#34;:false, \u0026#34;hl_Lines\u0026#34;:\u0026#34;\u0026#34;, \u0026#34;lineNoStart\u0026#34;:1, \u0026#34;lineNos\u0026#34;:false, \u0026#34;lineNumbersInTable\u0026#34;:true, \u0026#34;noClasses\u0026#34;:true, \u0026#34;style\u0026#34;:\u0026#34;monokai\u0026#34;, \u0026#34;tabWidth\u0026#34;:4 } } } 配置文件中各个设置项的含义如下：\ncodeFences：代码围栏功能，这个功能一般都要设为 true 的，不然很难看，就是干巴巴的-代码文字，没有颜色。\nguessSyntax：猜测语法，这个功能建议设置为 true, 如果你没有设置要显示的语言则会自动匹配。\nhl_Lines：高亮的行号，一般这个不设置，因为每个代码块我们可能希望让高亮的地方不一样。\nlineNoStart：行号从编号几开始，一般从 1 开始。\nlineNos：是否显示行号\nlineNumbersInTable：使用表来格式化行号和代码,而不是 标签。这个属性一般设置为 true.\nnoClasses：使用 class 标签，而不是内嵌的内联样式\n关于\u0026quot;style\u0026quot; https://xyproto.github.io/splash/docs/all.html\n这个网页呈现了所有markup的style样式，如下图所示\n","permalink":"https://eddyblog.cn/posts/tech/hugo_code_highlight/","summary":"前言： Hugo使用Chroma插件进行代码高亮。 Chroma: Hugo 在 v0.65.0 版本之后使用了 Chroma 代码高亮插件，它是一个 Go 语言实现的非常漂亮并能快速生成的代码高亮工具。 操作步骤： 默认的代码高亮配置文件如下，你可以复制到你的配置文件config.yml内进行修改： yaml 格式的配置文件： markup: highlight: codeFences: true guessSyntax: false hl_Lines: \u0026#34;\u0026#34; lineNoStart: 1 lineNos: false lineNumbersInTable:","title":"【Hugo】代码高亮"},{"content":"前言 hugo主题美化-添加emoji\n一、emoji表情符号素材网站（链接来源于网络资源） https://www.lovelyemoji.com/emoji-biaoqing/\nhttps://www.emojipedia.org/zh/\nhttps://www.emojiall.com/zh-hans\n二、使用步骤 1.在emoji素材网站复制emoji 2.在config.yml进行粘贴emoji （也可以在自己想改的相应文件进行修改） 代码如下（示例）：\nmenu: main: - identifier: search name: 🔍 搜索 url: search weight: 1 - identifier: home name: 🏠 主页 url: / weight: 2 - identifier: posts name: 📚 文章 url: posts weight: 3 - identifier: tags name: 🧩 标签 url: tags weight: 15 - identifier: archives name: ⏱️ 时间轴 url: archives/ weight: 20 - identifier: about name: 🙋🏻‍♂️ 关于 url: about weight: 50 3.效果图 总结 本文仅仅简单介绍了hugo主题美化-添加emoji。\n","permalink":"https://eddyblog.cn/posts/tech/hugo_emoji/","summary":"前言 hugo主题美化-添加emoji 一、emoji表情符号素材网站（链接来源于网络资源） https://www.lovelyemoji.com/emoji-biaoqing/ https://www.emojipedia.org/zh/ https://www.emojiall.com/zh-hans 二、使用步骤 1.在emoji素材网站复制emoji 2.在config.yml进行粘贴emoji （也可以在自己想改的相应文件进行修改） 代码如下（示例）： menu: main: - identifier: search name: 🔍 搜索 url: search weight: 1 - identifier: home name: 🏠","title":"【Hugo】主题美化-添加emoji"},{"content":"项目场景： Hugo\n问题描述 在本地使用Hugo 构建网站并在本地服务器上正常运行，但在将网站部署到 GitHub 远程仓库时出现了错误\n解决方案： 检查 GitHub 仓库代码： 首先，确保你将正确的代码推送到了 GitHub 远程仓库。在本地使用 git status 和 git diff 命令来检查是否有未提交的更改，并使用 git push 命令将代码推送到远程仓库。 （假如发现Github远程仓库里的文件污染严重，修改难度很大，可以在Github页面将username.github.io该仓库删除，然后重新创建一次username.github.io仓库，不过要确保本地有文件备份再删除远程仓库，远程仓库删除后无法恢复） 检查主题和模板： 如果你使用了主题或模板，确保它们在 GitHub 上也是最新的版本，并与本地使用的版本相同。有时候，在不同环境中使用不同的主题或模板版本可能导致不一致。\n检查配置文件： Hugo 使用配置文件来指定网站的设置和参数。确保在 GitHub 仓库中的配置文件与本地一致，并且没有不一致之处\n","permalink":"https://eddyblog.cn/posts/tech/hugo_error1/","summary":"项目场景： Hugo 问题描述 在本地使用Hugo 构建网站并在本地服务器上正常运行，但在将网站部署到 GitHub 远程仓库时出现了错误 解决方案： 检查 GitHub 仓库代码： 首先，确保你将正确的代码推送到了 GitHub 远程仓库。在本地使用 git status 和 git diff 命令来检查是否有未提交的更改，并使用 git push 命令将代码推送到远程仓库。 （假如发现Gi","title":"【Hugo】bug日记-将网站部署到GitHub远程仓库时出现了错误"},{"content":"前言 Githubpages对应仓库username.github.io删除之后,重新创建一次仍然可以匹配到Githubpages\n操作步骤 如果你删除了之前的 GitHub Pages 仓库（例如 username.github.io），然后重新创建了同名的仓库，并将该仓库的内容推送到 main 分支（或其他指定的分支），GitHub Pages 会自动重新启用，并根据新的仓库内容生成你的个人网站。\n以下是你需要做的步骤：\n删除旧的仓库： 删除之前的 username.github.io 仓库。\n创建新的仓库： 在 GitHub 上创建一个新的 username.github.io 仓库。\n将网站内容推送到新仓库： 将你的网站内容（包括 HTML、CSS、JavaScript 文件等）推送到新仓库的 main 分支（或其他指定的分支）中。\n等待 GitHub Pages 构建： 一旦你推送了内容，GitHub Pages 将会开始自动构建你的个人网站。\n访问个人网站： 在一段时间后，你可以通过浏览器访问 https://username.github.io 来查看你的个人网站。GitHub Pages 将使用新的仓库内容来生成网站。\n重要提示：可能需要一些时间来让 GitHub Pages 更新并生成你的新网站。这通常需要几分钟到几个小时的时间。此外，如果你之前使用了自定义域名（如 username.com）来指向 GitHub Pages，你可能需要重新设置域名解析以确保它与新的仓库匹配。\n总之，删除并重新创建一个同名的 GitHub Pages 仓库后，只要你推送了新内容，GitHub Pages 将重新构建你的个人网站。\n","permalink":"https://eddyblog.cn/posts/tech/hugo_githubpages/","summary":"前言 Githubpages对应仓库username.github.io删除之后,重新创建一次仍然可以匹配到Githubpages 操作步骤 如果你删除了之前的 GitHub Pages 仓库（例如 username.github.io），然后重新创建了同名的仓库，并将该仓库的内容推送到 main 分支（或其他指定的分支","title":"【Hugo】githubpages对应仓库username.github.io"},{"content":"前言 Hugo设置主页头像\n操作步骤 1.制作圆形头像：在线网站 （链接来源于网络资源） 网站如下（示例）：\nhttps://crop-circle.imageonline.co/cn/#google_vignette\nhttps://bigimage.11zon.com/zh-cn/crop-circle-image/\n2.config.yml更改 languages: en: params: languageName: \u0026#34;English\u0026#34; weight: 1 profileMode: enabled: true title: Eddy - blog subtitle: # subtitle: imageUrl: \u0026#34;img/logo3.png\u0026#34; #图片放在static/img/logo3.png imageTitle: imageWidth: 150 # 设置图像尺寸 imageHeight: 150 # 设置图像尺寸 主页头像 image 即为下图中圆形图像\n总结 本文简单介绍了Hugo设置主页头像的操作步骤和方法。\n","permalink":"https://eddyblog.cn/posts/tech/hugo_homepage_avatar/","summary":"前言 Hugo设置主页头像 操作步骤 1.制作圆形头像：在线网站 （链接来源于网络资源） 网站如下（示例）： https://crop-circle.imageonline.co/cn/#google_vignette https://bigimage.11zon.com/zh-cn/crop-circle-image/ 2.config.yml更改 languages: en: params: languageName: \u0026#34;English\u0026#34; weight: 1 profileMode: enabled: true title: Eddy - blog subtitle: # subtitle: imageUrl: \u0026#34;img/logo3.png\u0026#34; #图片放在static/img/logo3.png imageTitle: imageWidth: 150 # 设置图像尺寸 imageHeight: 150 # 设置图像尺寸 主页头像 image 即为下图中圆形","title":"【Hugo】设置主页头像"},{"content":"前言 Hugo添加icon/socialIcons\nsocialIcons 以添加socialIcons为例\nHugo本身是自带了很多支持的socialIcons的\n如:twitter，ins，github，email等等，写下如下代码，则会自动匹配对应icon\nparams: socialIcons: - name = \u0026#34;twitter\u0026#34; url = \u0026#34;https://twitter.com\u0026#34; 添加icon操作步骤 而假如想添加额外的socialIcons，那么需要自己添加svg代码，才能匹配到合适的icon图标\n下面是添加socialIcons：csdn的具体教程\nparams: socialIcons: - name: csdn url: \u0026#34;https://www.csdn.net/\u0026#34; 进入svg图库网站，以https://www.iconfont.cn/阿里巴巴矢量库为例\n搜索你需要的网站icon，以csdn为例\n选定合适的icon 点击图像，添加入库 添加至项目，创建项目Hugo，加入至项目Hugo 点击图像，对尺寸进行编辑（假如不知道怎么把握尺寸的话，可以先不编辑） 点击下载，复制图像的svg代码 进入layouts\\partials\\svg.html，添加刚刚复制的代码（我是直接在博客源码进行更改的，而不是themes文件夹） \u0026lt;svg t=\u0026#34;1691595802782\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;894\u0026#34; width=\u0026#34;200\u0026#34; height=\u0026#34;200\u0026#34;\u0026gt;\u0026lt;path d=\u0026#34;M512 1024C229.2224 1024 0 794.7776 0 512 0 229.2224 229.2224 0 512 0c282.7776 0 512 229.2224 512 512 0 282.7776-229.2224 512-512 512z m17.066667-413.525333c34.850133 4.352 68.778667 5.12 102.741333 2.0992 23.04-2.048 44.817067-8.362667 64.170667-21.9136 38.212267-26.794667 49.783467-85.1968 24.251733-123.050667-14.626133-21.7088-36.8128-30.344533-60.757333-35.498667-35.054933-7.543467-70.4512-5.751467-105.847467-3.413333-5.666133 0.3584-6.7584 3.072-7.236267 8.209067-3.072 32.682667-6.536533 65.314133-9.813333 97.962666-2.5088 24.814933-4.932267 49.629867-7.509333 75.605334z m53.4016-33.928534c1.962667-20.906667 3.6352-39.338667 5.4272-57.770666 1.553067-15.906133 3.413333-31.778133 4.727466-47.701334 0.3584-4.283733 1.553067-6.656 5.956267-6.382933 15.616 1.041067 31.709867 0.034133 46.728533 3.652267 36.488533 8.823467 48.725333 54.306133 23.3472 83.029333-15.8208 17.902933-36.7616 23.586133-59.255466 25.088-8.465067 0.546133-17.015467 0.085333-26.9312 0.085333zM512 434.295467c-2.184533-0.648533-3.5328-1.1776-4.932267-1.4336-37.717333-6.877867-75.690667-8.328533-113.646933-2.816-20.974933 3.037867-41.0112 9.489067-57.480533 23.330133-22.9888 19.319467-21.640533 46.848 4.4032 62.0032 13.056 7.594667 28.023467 12.509867 42.5984 17.288533 14.08 4.608 28.996267 6.826667 43.144533 11.264 12.5952 3.925333 14.011733 14.318933 3.584 22.306134-3.345067 2.56-7.441067 5.085867-11.537067 5.751466-11.195733 1.826133-22.698667 4.386133-33.826133 3.566934-24.098133-1.774933-48.042667-5.461333-72.5504-8.430934-1.365333 10.615467-2.935467 23.0912-4.5568 35.9424 4.181333 1.365333 7.68 2.730667 11.264 3.618134 33.9456 8.4992 68.386133 9.608533 102.912 5.12 20.087467-2.6112 39.4752-7.901867 56.695467-19.029334 28.603733-18.4832 36.693333-57.1904-4.676267-75.383466-14.506667-6.382933-30.190933-10.410667-45.482667-15.086934-11.4176-3.4816-23.313067-5.614933-34.525866-9.5232-9.7792-3.413333-11.144533-12.202667-3.037867-18.397866 4.6592-3.549867 10.717867-6.997333 16.384-7.3728a480.853333 480.853333 0 0 1 53.384533-0.853334c15.377067 0.699733 30.651733 3.549867 46.4896 5.5296L512 434.295467z m257.143467 2.048L750.933333 614.2976h54.152534c4.778667-45.636267 9.710933-90.7264 14.062933-135.8848 0.6144-6.365867 2.3552-8.840533 8.686933-9.0112 11.434667-0.273067 22.8864-1.979733 34.286934-1.570133 23.722667 0.853333 42.3936 9.728 38.4 43.264-2.901333 24.2688-5.597867 48.571733-8.2432 72.874666-1.092267 10.069333-1.826133 20.189867-2.730667 30.4128h55.330133c3.584-35.259733 7.9872-70.058667 10.496-104.994133 3.413333-47.4624-17.7664-73.3184-64.682666-80.213333-40.96-6.007467-81.339733-0.341333-121.5488 7.133866z m-483.498667 134.6048c-8.738133 1.297067-16.384 2.798933-24.098133 3.4816-25.6512 2.235733-51.319467 3.9424-76.305067-4.266667-13.909333-4.590933-24.6784-12.578133-29.7984-25.9584-7.901867-20.701867 0.887467-47.104 19.831467-60.3136 17.373867-12.117333 37.717333-15.9232 58.453333-15.9232 22.545067-0.017067 45.090133 2.423467 68.232533 3.84L307.2 432.298667c-15.069867-1.723733-29.4912-3.925333-43.997867-4.9152-41.0112-2.798933-80.64 2.6112-117.469866 20.462933-30.020267 14.557867-52.053333 36.010667-58.6752 68.130133-7.850667 38.144 11.537067 69.495467 51.7632 85.845334 19.1488 7.765333 39.287467 12.509867 60.0064 12.5952 24.746667 0.1024 49.493333-1.570133 74.205866-2.952534 3.106133-0.170667 8.311467-2.901333 8.669867-5.034666 1.979733-11.554133 2.730667-23.278933 3.9424-35.464534z\u0026#34; fill=\u0026#34;#DD1700\u0026#34; p-id=\u0026#34;895\u0026#34;\u0026gt;\u0026lt;/path\u0026gt;\u0026lt;/svg\u0026gt; \u0026lt;/svg\u0026gt; --\u0026gt; {{- else if (eq $icon_name \u0026#34;csdn\u0026#34;) -}} \u0026lt;svg t = ..............................这是刚刚复制的svg代码\u0026gt; \u0026lt;!-- \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; viewBox=\u0026#34;0 0 24 24\u0026#34; fill=\u0026#34;none\u0026#34; stroke=\u0026#34;currentColor\u0026#34; stroke-width=\u0026#34;2\u0026#34; stroke-linecap=\u0026#34;round\u0026#34; stroke-linejoin=\u0026#34;round\u0026#34;\u0026gt; \u0026lt;path transform=\u0026#34;scale(0.04) translate(75 40)\u0026#34; stroke-width=\u0026#34;50\u0026#34; d=\u0026#34;M433.754 420.445c-11.526 1.393-44.86-52.741-44.86-52.741 0 31.345-16.136 72.247-51.051 101.786 16.842 5.192 54.843 19.167 45.803 34.421-7.316 12.343-125.51 7.881-159.632 4.037-34.122 3.844-152.316 8.306-159.632-4.037-9.045-15.25 28.918-29.214 45.783-34.415-34.92-29.539-51.059-70.445-51.059-101.792 0 0-33.334 54.134-44.859 52.741-5.37-.65-12.424-29.644 9.347-99.704 10.261-33.024 21.995-60.478 40.144-105.779C60.683 98.063 108.982.006 224 0c113.737.006 163.156 96.133 160.264 214.963 18.118 45.223 29.912 72.85 40.144 105.778 21.768 70.06 14.716 99.053 9.346 99.704z\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; 示意图如下：\n最后在config.yml加入 params: socialIcons: - name: csdn url: \u0026#34;https://www.csdn.net/\u0026#34; ","permalink":"https://eddyblog.cn/posts/tech/hugo_icon/","summary":"前言 Hugo添加icon/socialIcons socialIcons 以添加socialIcons为例 Hugo本身是自带了很多支持的socialIcons的 如:twitter，ins，github，email等等，写下如下代码，则会自动匹配对应icon params: socialIcons: - name = \u0026#34;twitter\u0026#34; url = \u0026#34;https://twitter.com\u0026#34; 添加icon操作步骤 而假如想添","title":"【Hugo】添加icon+socialIcons"},{"content":"关于我\n英文名: EddyCliff 职业: 大学生 兴趣: 音乐、电影 ","permalink":"https://eddyblog.cn/about/","summary":"关于我 英文名: EddyCliff 职业: 大学生 兴趣: 音乐、电影","title":"🙋🏻‍♂️关于"}]