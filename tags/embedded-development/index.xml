<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Embedded Development on Eddy&#39;s blog</title>
    <link>https://eddyblog.cn/tags/embedded-development/</link>
    <description>Recent content in Embedded Development on Eddy&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 13 May 2024 00:17:58 +0800</lastBuildDate><atom:link href="https://eddyblog.cn/tags/embedded-development/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>嵌入式开发-STM32标准库学习：GPIO输出</title>
      <link>https://eddyblog.cn/posts/tech/stm32-standard-library-learning-jkd-p5/</link>
      <pubDate>Mon, 13 May 2024 00:17:58 +0800</pubDate>
      
      <guid>https://eddyblog.cn/posts/tech/stm32-standard-library-learning-jkd-p5/</guid>
      <description>本教程涵盖了STM32 GPIO的输出与输入功能，分为基础应用和理论知识两个部分。首先，通过LED闪烁、LED流水灯和蜂鸣器实验，介绍GPIO基本应用。随后，深入探讨了GPIO的理论知识，包括其作为通用I/O口的特性、工作模式及电平范围。进一步地，解析了STM32中GPIO的基本结构，涉及APB2外设总线、GPIO模块及其组成。此外，讨论了GPIO引脚的功能，包括输入和输出保护措施，以及施密特触发器的作用和应用。教程强调了STM32 GPIO的多样工作模式，如推挽输出、开漏输出等，及其在不同应用场景下的优势。最后，简述了面包板的应用，为读者提供了实际电路搭建的指导。</description>
    </item>
    
    <item>
      <title>嵌入式开发-STM32标准库学习：新建Keil工程</title>
      <link>https://eddyblog.cn/posts/tech/stm32-standard-library-learning-jkd-p4/</link>
      <pubDate>Sun, 12 May 2024 00:17:58 +0800</pubDate>
      
      <guid>https://eddyblog.cn/posts/tech/stm32-standard-library-learning-jkd-p4/</guid>
      <description>本文档旨在指导STM32平台的新手开发者如何建立工程项目，并有效地运用标准库和HAL库来提高开发效率。首先，文档强调了基于寄存器、标准库和HAL库三种不同的STM32开发方式，并推荐初学者优先考虑使用标准库进行开发。其次，它详细介绍了在STM32环境中添加启动文件、设置头文件路径以及创建用户自定义函数的基本步骤，同时给出了基于寄存器进行开发的示例。文章还说明了如何通过库函数更方便地配置GPIO和控制LED，从而简化了对硬件的操作。此外，文档涵盖了如何新建工程、选择合适的启动文件以及调试器设置，旨在帮助开发者有效下载和运行程序。最后，通过一系列实例，文章阐述了基于库函数的STM32工程构建和理解，突出了中断服务函数的重要性和在工程中的应用。整体而言，本文档为STM32平台的开发者提供了一套完整且实用的开发指导，从基础设置到高级应用应有尽有。</description>
    </item>
    
    <item>
      <title>嵌入式开发-STM32标准库学习：STM32简介</title>
      <link>https://eddyblog.cn/posts/tech/stm32-standard-library-learning-jkd-p2/</link>
      <pubDate>Sat, 11 May 2024 00:17:58 +0800</pubDate>
      
      <guid>https://eddyblog.cn/posts/tech/stm32-standard-library-learning-jkd-p2/</guid>
      <description>STM32是基于ARM Cortex-M内核由ST公司开发的32位微控制器，拥有高性能和丰富片上资源，适合嵌入式系统应用。它包括多个系列，满足不同场景需求，例如高性能、主流、超低功耗和无线等。STM32F103C8T6是其中一款，采用ARM Cortex-M3内核，具有72MHz主频、20Kb RAM和64Kb Flash，适用于多种应用。该芯片拥有全面的外设资源，如NVIC、SysTick定时器、RCC、GPIO、AFIO、EXTI、TIM定时器、ADC、DMA、USART、I2C/SPI和USB OTG等，提供高度灵活且可定制化的平台。文章还介绍了该芯片的引脚定义、电源管理、启动配置和最小系统板构成，强调了正确配置电源、时钟和下载电路的重要性。通过连接稳压供电模块、复位电路、Boot配置电路、LED测试电路和下载电路，可以构建出能够稳定工作的STM32最小系统板。此外，文档推荐参考官方资料以深入理解STM32的工作原理和应用。</description>
    </item>
    
    <item>
      <title>【嵌入式高级C编程】第十章 文件</title>
      <link>https://eddyblog.cn/posts/tech/c-programming-10file/</link>
      <pubDate>Mon, 23 Oct 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddyblog.cn/posts/tech/c-programming-10file/</guid>
      <description>第十章 文件 INIT INIT：本节内容正式开始。action! 一、文件的概念 文件用来存放程序、文档、音频、视频数据、图片等数据的。 文件就是存放在磁盘上的，一些数据的集合。在windows下可以通过写字板或记事本打开文本文件对文件进行编辑保存。写字板和记事 本是微软程序员写的程序，对文件进行</description>
    </item>
    
    <item>
      <title>【嵌入式高级C编程】第八章 结构体，共用体，枚举</title>
      <link>https://eddyblog.cn/posts/tech/c-programming-08struct/</link>
      <pubDate>Sun, 01 Oct 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddyblog.cn/posts/tech/c-programming-08struct/</guid>
      <description>第八章 结构体，共用体，枚举 INIT INIT：本节内容正式开始。action! 一、结构体类型的概念及定义 1.1 基本概述 构造类型： 不是基本类型的数据结构也不是指针，它是若干个相同或不同类型的数据构成的集合 常用的构造类型有数组、结构体、共用体 数组用于保存多个相同类型的数据 结构体用于保存多个不同类</description>
    </item>
    
    <item>
      <title>【嵌入式高级C编程】第六章 动态内存申请</title>
      <link>https://eddyblog.cn/posts/tech/c-programming-06dynamic-memory/</link>
      <pubDate>Sun, 01 Oct 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddyblog.cn/posts/tech/c-programming-06dynamic-memory/</guid>
      <description>第六章 动态内存申请 INIT INIT：本节内容正式开始。action! 一、动态分配内存的概 在数组一章中，介绍过数组的长度是预先定义好的，在整个程序中固定不变，但是在实际的编程中，往往会发生这种情况，即所需的内存空间取决于实际输入的数据，而无法预先确定 。 为了解决上述问题，Ｃ语言提供了一些内</description>
    </item>
    
    <item>
      <title>【嵌入式高级C编程】第七章 字符串处理函数</title>
      <link>https://eddyblog.cn/posts/tech/c-programming-07string/</link>
      <pubDate>Sun, 01 Oct 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddyblog.cn/posts/tech/c-programming-07string/</guid>
      <description>第七章 字符串处理函数 INIT INIT：本节内容正式开始。action! 一、获取字符串长度函数 #include &amp;lt;string.h&amp;gt; size_t strlen(const char *s); 功能：计算一个字符串的长度 参数： s：指定的字符串 返回值： 当前字符串的长度 注意：strlen获取的字符串长度遇到第一个\0结束且\0不算做字符串长度之中 #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;string.h&amp;gt; int main(int argc, char *argv[]) { //使用st</description>
    </item>
    
    <item>
      <title>【嵌入式高级C编程】第四章 预处理</title>
      <link>https://eddyblog.cn/posts/tech/c-programming-04preprocessing/</link>
      <pubDate>Sun, 01 Oct 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddyblog.cn/posts/tech/c-programming-04preprocessing/</guid>
      <description>第四章 预处理 INIT INIT：本节内容正式开始。action! 一、C语言编译过程 C语言的编译过程： 预处理、编译、汇编、链接 gcc -E hello.c -o hello.i 1、预处理 gcc -S hello.i –o hello.s 2、编译 gcc -c hello.s -o hello.o 3、汇编 gcc hello.o -o hello_elf 4、链接 1：预编译 将.c 中的头文件展开、宏展开 生成的文件是.i文件 2：编译 将预处理之后的.i 文件生</description>
    </item>
    
    <item>
      <title>【嵌入式高级C编程】第五章 指针</title>
      <link>https://eddyblog.cn/posts/tech/c-programming-05pointer/</link>
      <pubDate>Sun, 01 Oct 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddyblog.cn/posts/tech/c-programming-05pointer/</guid>
      <description>第五章 指针 INIT INIT：本节内容正式开始。action! 一、关于内存那点事 存储器：存储数据器件 外存 外存又叫外部存储器，长期存放数据，掉电不丢失数据 常见的外存设备：硬盘、flash、rom、u盘、光盘、磁带 内存 内存又叫内部存储器，暂时存放数据，掉电数据丢失 常见的内存设备：ram、DD</description>
    </item>
    
    <item>
      <title>【嵌入式高级C编程】第二章 数组</title>
      <link>https://eddyblog.cn/posts/tech/c-programming-02array/</link>
      <pubDate>Sat, 16 Sep 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddyblog.cn/posts/tech/c-programming-02array/</guid>
      <description>第二章 数组 INIT INIT：本节内容正式开始。action! 一、数组的概念 数组是若干个相同类型的变量在内存中有序存储的集合。 概念理解： 数组用于存储一组数据 数组里面存储的数据类型必须是相同的 数组在内存中会开辟一块连续的空间 int a[10]; //定义了一个整型的数组a，a是数组的名字，数组中有10个元素</description>
    </item>
    
    <item>
      <title>【嵌入式高级C编程】第三章 函数</title>
      <link>https://eddyblog.cn/posts/tech/c-programming-03fun/</link>
      <pubDate>Sat, 16 Sep 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddyblog.cn/posts/tech/c-programming-03fun/</guid>
      <description>第三章 函数 INIT INIT：本节内容正式开始。action! 一、函数的概念 函数是c语言的功能单位，实现一个功能可以封装一个函数来实现。 定义函数的时候一切以功能为目的，根据功能去定函数的参数和返回值。 函数就是讲特定功能的代码封装在一个函数内部，当要使用这些代码时，只需要通过函数名就可以使</description>
    </item>
    
  </channel>
</rss>
