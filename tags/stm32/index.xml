<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>STM32 on Eddy&#39;s blog</title>
    <link>https://eddyblog.cn/tags/stm32/</link>
    <description>Recent content in STM32 on Eddy&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 13 May 2024 00:17:58 +0800</lastBuildDate><atom:link href="https://eddyblog.cn/tags/stm32/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>嵌入式开发-STM32标准库学习：GPIO输出</title>
      <link>https://eddyblog.cn/posts/tech/stm32-standard-library-learning-jkd-p5/</link>
      <pubDate>Mon, 13 May 2024 00:17:58 +0800</pubDate>
      
      <guid>https://eddyblog.cn/posts/tech/stm32-standard-library-learning-jkd-p5/</guid>
      <description>本教程涵盖了STM32 GPIO的输出与输入功能，分为基础应用和理论知识两个部分。首先，通过LED闪烁、LED流水灯和蜂鸣器实验，介绍GPIO基本应用。随后，深入探讨了GPIO的理论知识，包括其作为通用I/O口的特性、工作模式及电平范围。进一步地，解析了STM32中GPIO的基本结构，涉及APB2外设总线、GPIO模块及其组成。此外，讨论了GPIO引脚的功能，包括输入和输出保护措施，以及施密特触发器的作用和应用。教程强调了STM32 GPIO的多样工作模式，如推挽输出、开漏输出等，及其在不同应用场景下的优势。最后，简述了面包板的应用，为读者提供了实际电路搭建的指导。</description>
    </item>
    
    <item>
      <title>嵌入式开发-STM32标准库学习：实现LED闪烁与流水灯，蜂鸣器</title>
      <link>https://eddyblog.cn/posts/tech/stm32-standard_library_learning-jkd-p6/</link>
      <pubDate>Mon, 13 May 2024 00:17:58 +0900</pubDate>
      
      <guid>https://eddyblog.cn/posts/tech/stm32-standard_library_learning-jkd-p6/</guid>
      <description>本节内容指导如何使用面包板、STM32最小系统板及ST Link开发一个简单的LED闪烁程序。首先，介绍搭建硬件电路所需步骤，包括正确连接电源、STM32板、LED和相关跳线。接着，在Keil5 软件中创建新工程，复制必要文件并配置工程设置以完成LED闪烁程序的编写、编译、下载和测试。此外，还介绍了如何利用一个辅助工具清理编译产生的中间文件，以便更好地分享工程。该指南详细讲解了如何使用RCC和GPIO外设及其库函数来控制LED的亮灭，包括设置工作模式、方向和速度。特别提到了四种GPIO输出函数和它们在控制LED亮灭方面的应用。通过主循环实现LED闪烁功能，并讨论了不同驱动模式下LED的性能差异。进一步地，本节还扩展到LED流水灯的制作，介绍了如何利用按位操作来控制多路LED的亮灭。最后，提供了学习STM32库函数的建议，包括查看库函数源码、利用官方文档和在线资源等方法。整个内容旨在帮助初学者掌握STM32开发的基础知识和技能。</description>
    </item>
    
    <item>
      <title>嵌入式开发-STM32标准库学习：GPIO输入</title>
      <link>https://eddyblog.cn/posts/tech/stm32-standard-library-learning-jkd-p7/</link>
      <pubDate>Mon, 13 May 2024 00:17:58 +1000</pubDate>
      
      <guid>https://eddyblog.cn/posts/tech/stm32-standard-library-learning-jkd-p7/</guid>
      <description>本博客首先介绍了通过按键控制LED的基础操作，随后转向光敏传感器控制蜂鸣器的应用，涵盖了硬件连接和预期现象的讨论。课程还强调了C语言中指针的重要性，并给出了简单介绍。特别提到了处理按键抖动的方法，建议通过增加延时来改善，以确保程序的稳定性和准确性。此外，课程还介绍了四种传感器模块的工作原理，包括光敏电阻、热敏电阻、对射式及反射式红外传感器，并讲述了如何通过这些模块获取外部模拟量的变化信息。在讨论模拟电压和数字电压的生成及转换过程中，突出了各种电子元件的作用和选择合适的输入模式的重要性。同时，还覆盖了C语言中的数据类型、宏定义、结构体和枚举的使用，强调了这些概念在程序设计中的重要作用。</description>
    </item>
    
    <item>
      <title>嵌入式开发-STM32标准库学习：按键控制LED,光敏传感器控制蜂鸣器</title>
      <link>https://eddyblog.cn/posts/tech/stm32-standard-library-learning-jkd-p8/</link>
      <pubDate>Mon, 13 May 2024 00:17:58 +1100</pubDate>
      
      <guid>https://eddyblog.cn/posts/tech/stm32-standard-library-learning-jkd-p8/</guid>
      <description>INIT INIT：本节内容正式开始。action! 按键控制LED 按键控制LED-硬件电路连接 接下来我们来写一下GPIO输入部分的代码。先看一下第一个代码的接线图。 图：按键控制LED 这里我接了两个按键和2个LED，其中两个按键分别接在了PB1和PB11两个口上。按键一端接GPIO口，另一</description>
    </item>
    
    <item>
      <title>嵌入式开发-STM32标准库学习：新建Keil工程</title>
      <link>https://eddyblog.cn/posts/tech/stm32-standard-library-learning-jkd-p4/</link>
      <pubDate>Sun, 12 May 2024 00:17:58 +0800</pubDate>
      
      <guid>https://eddyblog.cn/posts/tech/stm32-standard-library-learning-jkd-p4/</guid>
      <description>本文档旨在指导STM32平台的新手开发者如何建立工程项目，并有效地运用标准库和HAL库来提高开发效率。首先，文档强调了基于寄存器、标准库和HAL库三种不同的STM32开发方式，并推荐初学者优先考虑使用标准库进行开发。其次，它详细介绍了在STM32环境中添加启动文件、设置头文件路径以及创建用户自定义函数的基本步骤，同时给出了基于寄存器进行开发的示例。文章还说明了如何通过库函数更方便地配置GPIO和控制LED，从而简化了对硬件的操作。此外，文档涵盖了如何新建工程、选择合适的启动文件以及调试器设置，旨在帮助开发者有效下载和运行程序。最后，通过一系列实例，文章阐述了基于库函数的STM32工程构建和理解，突出了中断服务函数的重要性和在工程中的应用。整体而言，本文档为STM32平台的开发者提供了一套完整且实用的开发指导，从基础设置到高级应用应有尽有。</description>
    </item>
    
    <item>
      <title>嵌入式开发-STM32标准库学习：STM32简介</title>
      <link>https://eddyblog.cn/posts/tech/stm32-standard-library-learning-jkd-p2/</link>
      <pubDate>Sat, 11 May 2024 00:17:58 +0800</pubDate>
      
      <guid>https://eddyblog.cn/posts/tech/stm32-standard-library-learning-jkd-p2/</guid>
      <description>STM32是基于ARM Cortex-M内核由ST公司开发的32位微控制器，拥有高性能和丰富片上资源，适合嵌入式系统应用。它包括多个系列，满足不同场景需求，例如高性能、主流、超低功耗和无线等。STM32F103C8T6是其中一款，采用ARM Cortex-M3内核，具有72MHz主频、20Kb RAM和64Kb Flash，适用于多种应用。该芯片拥有全面的外设资源，如NVIC、SysTick定时器、RCC、GPIO、AFIO、EXTI、TIM定时器、ADC、DMA、USART、I2C/SPI和USB OTG等，提供高度灵活且可定制化的平台。文章还介绍了该芯片的引脚定义、电源管理、启动配置和最小系统板构成，强调了正确配置电源、时钟和下载电路的重要性。通过连接稳压供电模块、复位电路、Boot配置电路、LED测试电路和下载电路，可以构建出能够稳定工作的STM32最小系统板。此外，文档推荐参考官方资料以深入理解STM32的工作原理和应用。</description>
    </item>
    
    <item>
      <title>基于 FreeRTOS 的嵌入式超声波智能避障平衡车</title>
      <link>https://eddyblog.cn/posts/projects/rtos-stm32-intelligent-car/</link>
      <pubDate>Mon, 01 May 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddyblog.cn/posts/projects/rtos-stm32-intelligent-car/</guid>
      <description>RTOS-STM32-Intelligent-Car 本项目是基于FreeRTOS的STM32超声波智能避障平衡小车，实现了小车的自平衡、超声波避障以及通过智能手机远程控制的功能。 项目整体框架 开始main FS_Explorer_Init外设模块初始化 Freertos_Init操作系统初始化 启动系统 StartTask_200HZ环境</description>
    </item>
    
  </channel>
</rss>
