<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>👨🏻‍💻 技术 on Eddy&#39;s blog</title>
    <link>https://eddycliff.github.io/posts/tech/</link>
    <description>Recent content in 👨🏻‍💻 技术 on Eddy&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 13 May 2024 00:17:58 +0500</lastBuildDate><atom:link href="https://eddycliff.github.io/posts/tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux新手必看：一文掌握操作系统基本命令</title>
      <link>https://eddycliff.github.io/posts/tech/linux-basics-01/</link>
      <pubDate>Wed, 10 Apr 2024 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/linux-basics-01/</guid>
      <description>掌握Linux，从这里开始！轻松入门操作系统基本命令。</description>
    </item>
    
    <item>
      <title>Linux入门：基础命令与实用技巧</title>
      <link>https://eddycliff.github.io/posts/tech/linux-basics-02/</link>
      <pubDate>Sun, 21 Apr 2024 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/linux-basics-02/</guid>
      <description>本博客为新手量身打造，系统介绍了Linux操作系统的基本概念、核心命令及其应用场景。通过实例演示，帮助读者快速掌握Linux操作技巧，为进一步学习打下坚实基础。</description>
    </item>
    
    <item>
      <title>Linux入门：文件IO</title>
      <link>https://eddycliff.github.io/posts/tech/linux-basics-03/</link>
      <pubDate>Sun, 21 Apr 2024 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/linux-basics-03/</guid>
      <description>&lt;h2 id=&#34;init&#34;&gt;INIT&lt;/h2&gt;
&lt;div align = &#34;center&#34;&gt;
&lt;img src = &#34;https://testingcf.jsdelivr.net/gh/EddyCliff/ChartBed/Blog-Common-Images/INIT.jpg&#34; alt = &#34;INIT.jpg&#34; width = &#34;70%&#34; height = &#34;auto&#34;&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;INIT：本节内容正式开始。action!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;库的制作与使用&#34;&gt;库的制作与使用&lt;/h2&gt;
&lt;h3 id=&#34;库文件的定义&#34;&gt;&lt;strong&gt;库文件的定义&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;库文件是计算机软件中包含一系列函数、类、数据结构和资源的文件，它们被编译成机器码，可以在运行时被其他程序链接和调用。库文件能够提供一些常用的功能，使得程序员不必“重新发明轮子”，可以更高效地开发软件。
库文件主要有以下几种类型：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>嵌入式开发-STM32标准库学习：EXTI外部中断</title>
      <link>https://eddycliff.github.io/posts/tech/stm32-standard-library-learning-jkd-p11/</link>
      <pubDate>Mon, 13 May 2024 00:17:58 +0500</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/stm32-standard-library-learning-jkd-p11/</guid>
      <description>本博客主要介绍了STM32芯片的外部中断系统及其在实现特定功能中的应用，例如使用红外传感器检测光线变化和使用旋转编码器进行计数。核心概念是通过外部中断提高程序响应速度和执行效率，实现CPU在遇到重要事件时的暂停与处理。中断系统的关键要素包括中断优先级、嵌套处理、中断程序执行流程、中断保护和恢复现场，以及NVIC（中断向量控制器）在分配中断优先级和管理中断请求方面的作用。STM32拥有68个可屏蔽中断通道，支持多种外设中断源，所有中断请求均通过NVIC统一管理。外部中断（EXTI）功能特别值得一提，它允许CPU在检测到指定GPIO口的电平变化时暂停执行并执行中断服务程序，支持多种触发方式。此外，还讨论了外部中断在读取按键信号时的局限性，并提出了使用定时器中断作为替代方案。对于旋转编码器的应用，文章概述了其硬件连接方式、NVIC中断管理的基本知识，以及如何使用库函数简化中断处理过程和外部中断的配置方法。</description>
    </item>
    
    <item>
      <title>嵌入式开发-STM32标准库学习：OLED显示屏</title>
      <link>https://eddycliff.github.io/posts/tech/stm32-standard-library-learning-jkd-p10/</link>
      <pubDate>Mon, 13 May 2024 00:17:58 +0600</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/stm32-standard-library-learning-jkd-p10/</guid>
      <description>本博客主要讲述了如何将OLED显示屏驱动程序模块整合至STM32工程中，并详细阐述了该驱动程序的设计与实现细节。重点讲解了硬件连接方式，尤其是如何通过PB6和PB7端口为OLED屏幕提供电源并通过四针脚接口进行数据传输。同时，介绍了如何根据现有的工程文件创建新的项目，并在其中嵌入OLED显示屏的驱动代码。文档还探讨了利用特定软件的调试模式对程序进行分析和优化的方法，涵盖了在线仿真和计算机模拟两种调试方式，及其对应的启动调试步骤和常用调试命令。此外，文中强调了通过这些调试手段可以有效地诊断和修复程序中的错误，加深对程序执行流程的理解。最后，文档简要介绍了 Keil 软件中的调试模式和相关功能，如命令窗口、反汇编窗口和符号窗口的使用方法，为进一步的程序调试提供了工具和技巧。</description>
    </item>
    
    <item>
      <title>嵌入式开发-STM32标准库学习：OLED调试工具</title>
      <link>https://eddycliff.github.io/posts/tech/stm32-standard-library-learning-jkd-p9/</link>
      <pubDate>Mon, 13 May 2024 00:17:58 +0700</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/stm32-standard-library-learning-jkd-p9/</guid>
      <description>本文介绍了如何利用OLED显示屏进行程序调试，着重讲解了OLED显示屏的基本功能和驱动函数模块的使用方法。首先，介绍了一种常见的显示屏模块——0.96寸OLED模块，它的特点是体积小、接口少、驱动简单，适用于多种电子设计应用。该模块提供单色显示，具有较低的分辨率（128x64），但可通过简单的通信协议进行操作，适配多种电源电压和接口类型。文章详细讨论了该模块的不同版本（四针脚和七针脚）以及其在实际项目中的硬件连接方式。随后，引入了一个驱动函数模块，涵盖了从模块初始化到显示各种文本和数字信息的一系列实用函数。整体而言，本文突出了程序调试的重要性，并通过介绍具体的调试方法和工具，为开发人员提供了一套有效的调试方案，尤其是针对那些使用OLED显示屏的项目。</description>
    </item>
    
    <item>
      <title>嵌入式开发-STM32标准库学习：按键控制LED,光敏传感器控制蜂鸣器</title>
      <link>https://eddycliff.github.io/posts/tech/stm32-standard-library-learning-jkd-p8/</link>
      <pubDate>Mon, 13 May 2024 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/stm32-standard-library-learning-jkd-p8/</guid>
      <description>本博客详细介绍了一个基于STM32最小系统板的项目开发过程，重点涵盖了基本的LED控制电路设计、模块化编程的应用以及扩展至光敏传感器和蜂鸣器模块的功能实现。首先，通过对PB1和PB10引脚连接按键，以及PA1和PA2引脚连接LED的基本电路描述，项目导入了如何在STM32板上实现简单LED控制的基础。在此基础上，强调了模块化编程的重要性，即通过将驱动代码分离至单独的.C和.H文件中，以提升代码的管理与移植性。特别提到了在&amp;#39;module&amp;#39;文件夹下创建硬件驱动程序的方法，以及在这些文件中添加必要预处理指令和其他细节的重要性。 其次，详细叙述了LED初始化和模块化编程的具体实践，包括LED的时钟配置、端口模式设置，以及如何通过结构体变量实现对GPIO的精确控制。此外，还介绍了如何处理警告和错误信息，从而保证了程序的稳定运行。通过这些步骤，成功实现了LED的点亮与熄灭功能，验证了程序的正确性。 进一步地，文章扩展到如何完善LED驱动程序模块，包括提供两种不同功能实现方式以及在硬件目录下创建新文件来组织代码的方法。接下来，详细介绍了使用RCC APB2外设时钟控制、配置GPIO端口模式、读取按键值等功能，以及如何通过GPL库消除按键抖动，并实现光照强度检测与蜂鸣器控制的综合应用。 总之，该段内容围绕着STM32开发板上的LED、光敏传感器和蜂鸣器模块的控制，展示了从基础电路设计到模块化编程，再到复杂功能实现的完整开发流程。每个环节都突出了理论与实践相结合的重要性，旨在提高代码的质量和项目的可维护性。</description>
    </item>
    
    <item>
      <title>嵌入式开发-STM32标准库学习：GPIO输入</title>
      <link>https://eddycliff.github.io/posts/tech/stm32-standard-library-learning-jkd-p7/</link>
      <pubDate>Mon, 13 May 2024 00:17:58 +0900</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/stm32-standard-library-learning-jkd-p7/</guid>
      <description>本博客首先介绍了通过按键控制LED的基础操作，随后转向光敏传感器控制蜂鸣器的应用，涵盖了硬件连接和预期现象的讨论。课程还强调了C语言中指针的重要性，并给出了简单介绍。特别提到了处理按键抖动的方法，建议通过增加延时来改善，以确保程序的稳定性和准确性。此外，课程还介绍了四种传感器模块的工作原理，包括光敏电阻、热敏电阻、对射式及反射式红外传感器，并讲述了如何通过这些模块获取外部模拟量的变化信息。在讨论模拟电压和数字电压的生成及转换过程中，突出了各种电子元件的作用和选择合适的输入模式的重要性。同时，还覆盖了C语言中的数据类型、宏定义、结构体和枚举的使用，强调了这些概念在程序设计中的重要作用。</description>
    </item>
    
    <item>
      <title>嵌入式开发-STM32标准库学习：实现LED闪烁与流水灯，蜂鸣器</title>
      <link>https://eddycliff.github.io/posts/tech/stm32-standard_library_learning-jkd-p6/</link>
      <pubDate>Mon, 13 May 2024 00:17:58 +1000</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/stm32-standard_library_learning-jkd-p6/</guid>
      <description>本节内容指导如何使用面包板、STM32最小系统板及ST Link开发一个简单的LED闪烁程序。首先，介绍搭建硬件电路所需步骤，包括正确连接电源、STM32板、LED和相关跳线。接着，在Keil5 软件中创建新工程，复制必要文件并配置工程设置以完成LED闪烁程序的编写、编译、下载和测试。此外，还介绍了如何利用一个辅助工具清理编译产生的中间文件，以便更好地分享工程。该指南详细讲解了如何使用RCC和GPIO外设及其库函数来控制LED的亮灭，包括设置工作模式、方向和速度。特别提到了四种GPIO输出函数和它们在控制LED亮灭方面的应用。通过主循环实现LED闪烁功能，并讨论了不同驱动模式下LED的性能差异。进一步地，本节还扩展到LED流水灯的制作，介绍了如何利用按位操作来控制多路LED的亮灭。最后，提供了学习STM32库函数的建议，包括查看库函数源码、利用官方文档和在线资源等方法。整个内容旨在帮助初学者掌握STM32开发的基础知识和技能。</description>
    </item>
    
    <item>
      <title>嵌入式开发-STM32标准库学习：GPIO输出</title>
      <link>https://eddycliff.github.io/posts/tech/stm32-standard-library-learning-jkd-p5/</link>
      <pubDate>Mon, 13 May 2024 00:17:58 +1100</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/stm32-standard-library-learning-jkd-p5/</guid>
      <description>本教程涵盖了STM32 GPIO的输出与输入功能，分为基础应用和理论知识两个部分。首先，通过LED闪烁、LED流水灯和蜂鸣器实验，介绍GPIO基本应用。随后，深入探讨了GPIO的理论知识，包括其作为通用I/O口的特性、工作模式及电平范围。进一步地，解析了STM32中GPIO的基本结构，涉及APB2外设总线、GPIO模块及其组成。此外，讨论了GPIO引脚的功能，包括输入和输出保护措施，以及施密特触发器的作用和应用。教程强调了STM32 GPIO的多样工作模式，如推挽输出、开漏输出等，及其在不同应用场景下的优势。最后，简述了面包板的应用，为读者提供了实际电路搭建的指导。</description>
    </item>
    
    <item>
      <title>嵌入式开发-STM32标准库学习：新建Keil工程</title>
      <link>https://eddycliff.github.io/posts/tech/stm32-standard-library-learning-jkd-p4/</link>
      <pubDate>Sun, 12 May 2024 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/stm32-standard-library-learning-jkd-p4/</guid>
      <description>本文档旨在指导STM32平台的新手开发者如何建立工程项目，并有效地运用标准库和HAL库来提高开发效率。首先，文档强调了基于寄存器、标准库和HAL库三种不同的STM32开发方式，并推荐初学者优先考虑使用标准库进行开发。其次，它详细介绍了在STM32环境中添加启动文件、设置头文件路径以及创建用户自定义函数的基本步骤，同时给出了基于寄存器进行开发的示例。文章还说明了如何通过库函数更方便地配置GPIO和控制LED，从而简化了对硬件的操作。此外，文档涵盖了如何新建工程、选择合适的启动文件以及调试器设置，旨在帮助开发者有效下载和运行程序。最后，通过一系列实例，文章阐述了基于库函数的STM32工程构建和理解，突出了中断服务函数的重要性和在工程中的应用。整体而言，本文档为STM32平台的开发者提供了一套完整且实用的开发指导，从基础设置到高级应用应有尽有。</description>
    </item>
    
    <item>
      <title>嵌入式开发-STM32标准库学习：STM32简介</title>
      <link>https://eddycliff.github.io/posts/tech/stm32-standard-library-learning-jkd-p2/</link>
      <pubDate>Sat, 11 May 2024 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/stm32-standard-library-learning-jkd-p2/</guid>
      <description>STM32是基于ARM Cortex-M内核由ST公司开发的32位微控制器，拥有高性能和丰富片上资源，适合嵌入式系统应用。它包括多个系列，满足不同场景需求，例如高性能、主流、超低功耗和无线等。STM32F103C8T6是其中一款，采用ARM Cortex-M3内核，具有72MHz主频、20Kb RAM和64Kb Flash，适用于多种应用。该芯片拥有全面的外设资源，如NVIC、SysTick定时器、RCC、GPIO、AFIO、EXTI、TIM定时器、ADC、DMA、USART、I2C/SPI和USB OTG等，提供高度灵活且可定制化的平台。文章还介绍了该芯片的引脚定义、电源管理、启动配置和最小系统板构成，强调了正确配置电源、时钟和下载电路的重要性。通过连接稳压供电模块、复位电路、Boot配置电路、LED测试电路和下载电路，可以构建出能够稳定工作的STM32最小系统板。此外，文档推荐参考官方资料以深入理解STM32的工作原理和应用。</description>
    </item>
    
    <item>
      <title>【温故而知新】C语言和C&#43;&#43;基础知识回顾</title>
      <link>https://eddycliff.github.io/posts/tech/exp-sticker-c-cpp-basic-knowledge-review/</link>
      <pubDate>Wed, 01 May 2024 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/exp-sticker-c-cpp-basic-knowledge-review/</guid>
      <description>&lt;div align = &#34;center&#34;&gt;
&lt;img src = &#34;https://testingcf.jsdelivr.net/gh/EddyCliff/ChartBed/STM32-standard-library-learning-JKD/P11-EXTI%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD-1.jpg&#34; alt = &#34;P11-EXTI外部中断-1.jpg&#34; width = &#34;70%&#34; height = &#34;auto&#34;&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;h2 id=&#34;一数组和指针有什么联系&#34;&gt;一、数组和指针有什么联系？&lt;/h2&gt;
&lt;p&gt;指针就是指针，指针变量在 32 位系统下，永远占 4 个 byte，其值为某一个内存的地址。指针可以指向任何地方，但是不是任何地方你都能通过这个指针变量访问到。&lt;/p&gt;
&lt;p&gt;数组就是数组，其大小与元素的类型和个数有关。定义数组时必须指定其元素的类型和个数。数组可以存任何类型的数据，但不能存函数&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【温故而知新】单片机基础知识回顾</title>
      <link>https://eddycliff.github.io/posts/tech/exp-sticker-mcu-basic-knowledge-review/</link>
      <pubDate>Wed, 01 May 2024 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/exp-sticker-mcu-basic-knowledge-review/</guid>
      <description>&lt;div align = &#34;center&#34;&gt;
&lt;img src = &#34;https://testingcf.jsdelivr.net/gh/EddyCliff/ChartBed/STM32-standard-library-learning-JKD/P11-EXTI%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD-1.jpg&#34; alt = &#34;P11-EXTI外部中断-1.jpg&#34; width = &#34;70%&#34; height = &#34;auto&#34;&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;h2 id=&#34;一单片机三要素&#34;&gt;一、单片机三要素？&lt;/h2&gt;
&lt;p&gt;单片机最小系统的三要素为：电源、晶振和复位电路。&lt;/p&gt;
&lt;h2 id=&#34;二单片机最小系统由哪几个部分组成&#34;&gt;二、单片机最小系统由哪几个部分组成？&lt;/h2&gt;
&lt;p&gt;单片机最小系统由五部分组成，分别是MCU(微处理控制单元)、电源、时钟电路/晶振、复位电路、程序加载口。其中三要素是电源、时钟电路和复位电路。&lt;/p&gt;
&lt;h2 id=&#34;三io口工作方式&#34;&gt;三、IO口工作方式&lt;/h2&gt;
&lt;p&gt;上拉输入，下拉输入，推挽输出，开漏输出。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SQLite数据库简介及使用指南</title>
      <link>https://eddycliff.github.io/posts/tech/database_sqlite/</link>
      <pubDate>Wed, 01 May 2024 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/database_sqlite/</guid>
      <description>这篇博客提供了SQLite数据库的全面介绍和使用指南。它详细解释了SQLite作为一种轻量级、文件系统基础的数据库管理系统，非常适合小型项目和移动应用。文章介绍了SQLite的安装过程，包括Windows、macOS和Linux系统下的安装步骤。接着，博客通过创建数据库、表，以及执行插入、查询、更新和删除操作的示例，演示了SQLite的基本使用方法。最后，通过一个案例演示，指导读者如何从头开始使用SQLite来管理数据。博客旨在帮助读者快速掌握SQLite，并强调了其作为嵌入式数据库的优势，适用于多种应用场景。</description>
    </item>
    
    <item>
      <title>C&#43;&#43;编程入门：类和对象-封装</title>
      <link>https://eddycliff.github.io/posts/tech/cpp-programming-p4/</link>
      <pubDate>Tue, 30 Apr 2024 00:17:58 +0900</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/cpp-programming-p4/</guid>
      <description>&lt;div align = &#34;center&#34;&gt;
&lt;img src = &#34;https://testingcf.jsdelivr.net/gh/EddyCliff/ChartBed/Blog-Common-Images/%E7%9F%A5%E8%AF%86%E8%92%99%E8%94%BD%E4%BA%86%E6%88%91%E7%9A%84%E5%8F%8C%E7%9C%BC.jpg&#34; alt = &#34;闪亮登场.jpg&#34; width = &#34;70%&#34; height = &#34;auto&#34;&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;h2 id=&#34;init&#34;&gt;INIT&lt;/h2&gt;
&lt;div align = &#34;center&#34;&gt;
&lt;img src = &#34;https://testingcf.jsdelivr.net/gh/EddyCliff/ChartBed/Blog-Common-Images/INIT.jpg&#34; alt = &#34;INIT.jpg&#34; width = &#34;70%&#34; height = &#34;auto&#34;&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;INIT：本节内容正式开始。action!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;4-类和对象&#34;&gt;4 类和对象&lt;/h2&gt;
&lt;p&gt;C++面向对象的三大特性为：&lt;strong&gt;封装、继承、多态。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;C++认为&lt;strong&gt;万事万物都皆为对象&lt;/strong&gt;，对象上有其属性和行为。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例如：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;人可以作为对象，属性有姓名、年龄、身高、体重&amp;hellip;，行为有走、跑、跳、吃饭、唱歌&amp;hellip;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;编程入门：函数提高-函数重载</title>
      <link>https://eddycliff.github.io/posts/tech/cpp-programming-p3/</link>
      <pubDate>Tue, 30 Apr 2024 00:17:58 +1000</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/cpp-programming-p3/</guid>
      <description>&lt;div align = &#34;center&#34;&gt;
&lt;img src = &#34;https://testingcf.jsdelivr.net/gh/EddyCliff/ChartBed/Blog-Common-Images/%E7%9F%A5%E8%AF%86%E8%92%99%E8%94%BD%E4%BA%86%E6%88%91%E7%9A%84%E5%8F%8C%E7%9C%BC.jpg&#34; alt = &#34;闪亮登场.jpg&#34; width = &#34;70%&#34; height = &#34;auto&#34;&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;h2 id=&#34;init&#34;&gt;INIT&lt;/h2&gt;
&lt;div align = &#34;center&#34;&gt;
&lt;img src = &#34;https://testingcf.jsdelivr.net/gh/EddyCliff/ChartBed/Blog-Common-Images/INIT.jpg&#34; alt = &#34;INIT.jpg&#34; width = &#34;70%&#34; height = &#34;auto&#34;&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;INIT：本节内容正式开始。action!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;3-函数提高&#34;&gt;3 函数提高&lt;/h2&gt;
&lt;h3 id=&#34;31-函数默认参数&#34;&gt;3.1 函数默认参数&lt;/h3&gt;
&lt;p&gt;在C++中，函数的形参列表中的形参是可以有默认值的。&lt;/p&gt;
&lt;p&gt;语法：&lt;code&gt;返回值类型 函数名 （参数= 默认值）{}&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;示例代码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&amp;lt;iostream&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//函数默认参数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//如果我们自己传入数据，就用自己的数据，如果没有，那么用默认值
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//语法：返回值类型 函数名(形参 = 默认值){}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; c;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//注意事项：
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//1、如果某个位置已经有了默认参数，那么这个位置往后，从左往右都必须有默认值
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//int func2(int a = 10,int b,int c) //此时会报错
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//	return a + b + c;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//2、如果函数声明有默认参数，函数实现就不能有默认参数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//声明和实现只能有一个有默认参数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//int func2(int a = 10, int b = 10);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//int func2(int a = 20, int b = 20) //此时会报错
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//	return a + b;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; func(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;运行结果&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;编程入门：引用</title>
      <link>https://eddycliff.github.io/posts/tech/cpp-programming-p2/</link>
      <pubDate>Tue, 30 Apr 2024 00:17:58 +1100</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/cpp-programming-p2/</guid>
      <description>&lt;div align = &#34;center&#34;&gt;
&lt;img src = &#34;https://testingcf.jsdelivr.net/gh/EddyCliff/ChartBed/Blog-Common-Images/%E7%9F%A5%E8%AF%86%E8%92%99%E8%94%BD%E4%BA%86%E6%88%91%E7%9A%84%E5%8F%8C%E7%9C%BC.jpg&#34; alt = &#34;闪亮登场.jpg&#34; width = &#34;70%&#34; height = &#34;auto&#34;&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;h2 id=&#34;init&#34;&gt;INIT&lt;/h2&gt;
&lt;div align = &#34;center&#34;&gt;
&lt;img src = &#34;https://testingcf.jsdelivr.net/gh/EddyCliff/ChartBed/Blog-Common-Images/INIT.jpg&#34; alt = &#34;INIT.jpg&#34; width = &#34;70%&#34; height = &#34;auto&#34;&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;INIT：本节内容正式开始。action!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;2-引用&#34;&gt;2 引用&lt;/h2&gt;
&lt;h3 id=&#34;21-引用的基本使用&#34;&gt;2.1 引用的基本使用&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;作用：&lt;/strong&gt; 给变量起别名&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语法：&lt;/strong&gt; &lt;code&gt;数据类型 &amp;amp;别名 = 原名&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;示例代码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&amp;lt;iostream&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//引用基本语法
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//数据类型 &amp;amp;别名 = 原名
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//创建引用
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a = &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b = &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a = &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b = &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;运行结果&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;编程入门：内存分区模型</title>
      <link>https://eddycliff.github.io/posts/tech/cpp-programming-p1/</link>
      <pubDate>Tue, 30 Apr 2024 00:17:58 +1200</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/cpp-programming-p1/</guid>
      <description>&lt;div align = &#34;center&#34;&gt;
&lt;img src = &#34;https://testingcf.jsdelivr.net/gh/EddyCliff/ChartBed/Blog-Common-Images/%E7%9F%A5%E8%AF%86%E8%92%99%E8%94%BD%E4%BA%86%E6%88%91%E7%9A%84%E5%8F%8C%E7%9C%BC.jpg&#34; alt = &#34;闪亮登场.jpg&#34; width = &#34;70%&#34; height = &#34;auto&#34;&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;h2 id=&#34;init&#34;&gt;INIT&lt;/h2&gt;
&lt;div align = &#34;center&#34;&gt;
&lt;img src = &#34;https://testingcf.jsdelivr.net/gh/EddyCliff/ChartBed/Blog-Common-Images/INIT.jpg&#34; alt = &#34;INIT.jpg&#34; width = &#34;70%&#34; height = &#34;auto&#34;&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;INIT：本节内容正式开始。action!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1-内存分区模型&#34;&gt;1 内存分区模型&lt;/h2&gt;
&lt;p&gt;C++程序在执行时，将内存大方向划分为&lt;strong&gt;4个区域&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;代码区：存放函数体的二进制代码，由操作系统进行管理的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;全局区：存放全局变量和静态变量以及常量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;栈区：由编译器自动分配释放, 存放函数的参数值,局部变量等。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>markdown测试</title>
      <link>https://eddycliff.github.io/posts/tech/test/</link>
      <pubDate>Wed, 10 Apr 2024 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/test/</guid>
      <description>本文用于测试Hugo博客网站Papermod主题的博客渲染效果</description>
    </item>
    
    <item>
      <title>【Hugo网站搭建】markdown中图片大小和对齐方式调整</title>
      <link>https://eddycliff.github.io/posts/tech/hugo-image-in-markdown/</link>
      <pubDate>Sun, 03 Dec 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/hugo-image-in-markdown/</guid>
      <description>使用HTML标签对markdown中图片大小和对齐方式调整</description>
    </item>
    
    <item>
      <title>【计算机网络】第八章 互联网上的音频/视频服务</title>
      <link>https://eddycliff.github.io/posts/tech/computer-network-08/</link>
      <pubDate>Mon, 27 Nov 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/computer-network-08/</guid>
      <description>&lt;h2 id=&#34;第八章-互联网上的音频视频服务&#34;&gt;第八章 互联网上的音频/视频服务&lt;/h2&gt;
&lt;h3 id=&#34;本章重要概念&#34;&gt;本章重要概念&lt;/h3&gt;
&lt;p&gt;1）多媒体信息有两个重要特点：（1）多媒体信息的信息量往往很大；（2）在传输多媒体数据时，对时延和时延抖动均有较高的要求。在互联网上传输多媒体数据时，我们都是指含有“边传输、边播放”的特点。&lt;/p&gt;
&lt;p&gt;2）由多媒体信息构成的分组在发送时是等时的。这些分组在到达接收端时就变成为非等时的。当接收端缓存中的分组数达到一定的数量后，再以恒定速率按顺序将这些分组进行还原播放。这样就产生了播放时延，同时也可以在很大程度上消除时延的抖动。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【计算机网络】第二章 物理层</title>
      <link>https://eddycliff.github.io/posts/tech/computer-network-02/</link>
      <pubDate>Mon, 27 Nov 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/computer-network-02/</guid>
      <description>&lt;h2 id=&#34;第二章-物理层&#34;&gt;第二章 物理层&lt;/h2&gt;
&lt;h3 id=&#34;本章的重要概念&#34;&gt;本章的重要概念&lt;/h3&gt;
&lt;p&gt;1）物理层的主要任务就是确定与传输媒体的接口有关的一些特性，如机械特性、电气特性、功能特性和过程特性。&lt;/p&gt;
&lt;p&gt;2）一个数据通信系统可划分为三大部分，即源系统、传输系统和目的系统。源系统包括源点（或源站、信源）和发送器，目的系统包括接收器和终点（或目的站、信宿）。&lt;/p&gt;
&lt;p&gt;3）通信的目的是传送消息。话音、文字、图像、视频等都是消息。数据是运送消息的实体。信号则是数据的电气或电磁的表现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【计算机网络】第九章 无线网络和移动网络</title>
      <link>https://eddycliff.github.io/posts/tech/computer-network-09/</link>
      <pubDate>Mon, 27 Nov 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/computer-network-09/</guid>
      <description>&lt;h2 id=&#34;第九章-无线网络和移动网络&#34;&gt;第九章 无线网络和移动网络&lt;/h2&gt;
&lt;h3 id=&#34;本章重要概念&#34;&gt;本章重要概念&lt;/h3&gt;
&lt;p&gt;1）无线局域网可分为两大类。第一类是有固定基础设施的，第二类是无固定基础设施的。&lt;/p&gt;
&lt;p&gt;2）最常用的、有固定基础设施的无线局域网的标准是 IEEE 的 802.11 系列。使用 802.11 系列标准的局域网又称为Wi-Fi。
3）802.11 无线以太网标准使用星形拓扑，其中心叫作接入点 AP，它是链路层设备，相当于基本服务集内的基站。但家用的接入点都嵌入了路由器的功能，常称为无线路由器。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【计算机网络】第六章 应用层</title>
      <link>https://eddycliff.github.io/posts/tech/computer-network-06/</link>
      <pubDate>Mon, 27 Nov 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/computer-network-06/</guid>
      <description>&lt;h2 id=&#34;第六章-应用层&#34;&gt;第六章 应用层&lt;/h2&gt;
&lt;h3 id=&#34;本章重要概念&#34;&gt;本章重要概念&lt;/h3&gt;
&lt;p&gt;1）应用层协议是为了解决某一类应用问题，而问题的解决又是通过位于不同主机中的多个应用进程之间的通信和协同工作来完成的。应用层规定了应用进程在通信时所遵循的协议。应用层的许多协议都是基于客户-服务器方式的。客户是服务请求方，服务器是服务提供方。
2）域名系统DNS 是互联网使用的命名系统，用来把便于人们使用的机器名字转换为IP地址。DNS是一个联机分布式数据库系统，并采用客户服务器方式。
3）域名到IP 地址的解析是由分布在互联网上的许多域名服务器程序（即域名服务器）共同完成的。
4）互联网采用层次树状结构的命名方法，任何一台连接在互联网上的主机或路由器，都有一个唯一的层次结构的名字，即域名。域名中的点和点分十进制 IP地址中的点没有对应关系。
5）域名服务器分为根域名服务器、顶级域名服务器、权限域名服务器和本地域名服务器。
6）文件传送协议FTP使用TCP可靠的运输服务。FTP使用客户服务器方式。在进行文件传输时，FTP 的客户和服务器之间要建立两个并行的 TCP 连接：控制连接和数据连接。实际用于传输文件的是数据连接。
7）万维网WWW是一个大规模的、联机式的信息储藏所，可以非常方便地从互联网上的一个站点链接到另一个站点。
8）万维网的客户程序向互联网中的服务器程序发出请求，服务器程序向客户程序送回客户所要的万维网文档。在客户程序主窗口上显示出的万维网文档称为页面。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【计算机网络】第七章 网络安全</title>
      <link>https://eddycliff.github.io/posts/tech/computer-network-07/</link>
      <pubDate>Mon, 27 Nov 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/computer-network-07/</guid>
      <description>&lt;h2 id=&#34;第七章-网络安全&#34;&gt;第七章 网络安全&lt;/h2&gt;
&lt;h3 id=&#34;本章重要概念&#34;&gt;本章重要概念&lt;/h3&gt;
&lt;p&gt;1）计算机网络上的通信面临的威胁可分为两大类，即被动攻击（如截获）和主动攻击(如中断、篡改、伪造)。主动攻击的类型有更改报文流、拒绝服务、伪造初始化、恶意程序（病毒、蠕虫、木马、逻辑炸弹、后门入侵、流氓软件）等。&lt;/p&gt;
&lt;p&gt;2）计算机网络安全主要有以下一些内容：机密性、端点鉴别、信息的完整性、运行的安全性和访问控制。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【计算机网络】第三章 数据链路层</title>
      <link>https://eddycliff.github.io/posts/tech/computer_network-03/</link>
      <pubDate>Mon, 27 Nov 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/computer_network-03/</guid>
      <description>&lt;h2 id=&#34;第三章-数据链路层&#34;&gt;第三章 数据链路层&lt;/h2&gt;
&lt;h3 id=&#34;本章的重要概念&#34;&gt;本章的重要概念&lt;/h3&gt;
&lt;p&gt;1）链路是从一个节点到相邻节点的一段物理线路，数据链路则是在链路的基础上增加了一些必要的硬件（如网络适配器）和软件（如协议的实现）。&lt;/p&gt;
&lt;p&gt;2）数据链路层使用的信道主要有点对点信道和广播信道两种。&lt;/p&gt;
&lt;p&gt;3）数据链路层传送的协议数据单元是帧。数据链路层的三个基本问题是：封装成帧、透明传输和差错检测。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【计算机网络】第四章 网络层</title>
      <link>https://eddycliff.github.io/posts/tech/computer-network-04/</link>
      <pubDate>Mon, 27 Nov 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/computer-network-04/</guid>
      <description>&lt;h2 id=&#34;第四章-网络层&#34;&gt;第四章 网络层&lt;/h2&gt;
&lt;h3 id=&#34;本章的重要概念&#34;&gt;本章的重要概念&lt;/h3&gt;
&lt;p&gt;1）TCP/IP体系中的网络层向上只提供简单灵活的、无连接的、尽最大努力交付的数据报服务。网络层不提供服务质量的承诺，不保证分组交付的时限，所传送的分组可能出错、丢失、重复和失序。进程之间通信的可靠性由运输层负责。&lt;/p&gt;
&lt;p&gt;2）IP网是虚拟的，因为从网络层上看，IP网好像是一个统一的、抽象的网络（实际上是异构的)。IP层抽象的互联网屏蔽了下层网络很复杂的细节，使我们能够使用统一的、抽象的IP地址处理主机之间的通信问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【计算机网络】第五章 运输层</title>
      <link>https://eddycliff.github.io/posts/tech/computer-network-05/</link>
      <pubDate>Mon, 27 Nov 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/computer-network-05/</guid>
      <description>&lt;h2 id=&#34;第五章-运输层&#34;&gt;第五章 运输层&lt;/h2&gt;
&lt;h3 id=&#34;本章重要概念&#34;&gt;本章重要概念&lt;/h3&gt;
&lt;p&gt;1）运输层提供应用进程间的逻辑通信，也就是说，运输层之间的通信并不是真正在两运输层之间直接传送数据。运输层向应用层屏蔽了下面网络的细节（如网络拓扑、所采用的路由选择协议等），它使应用进程看见的就好像在两个运输层实体之间有一条端到端的逻辑通信信道。&lt;/p&gt;
&lt;p&gt;2）网络层为主机之间提供逻辑通信，而运输层为应用进程之间提供端到端的逻辑通信&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【计算机网络】第一章 概述</title>
      <link>https://eddycliff.github.io/posts/tech/computer-network-01/</link>
      <pubDate>Mon, 27 Nov 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/computer-network-01/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;启程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;欢迎来到《计算机网络简明教程- 重要概念》系列！计算机网络作为现代科技的基础，贯穿着我们日常生活和商业世界的方方面面。这个系列旨在为您呈现计算机网络领域中最关键、最基础的概念和原理，帮助您建立对网络基础知识的清晰理解。&lt;/p&gt;
&lt;p&gt;让我们一起踏上这个探索计算机网络的旅程吧！&lt;/p&gt;
&lt;h2 id=&#34;第一章-概述&#34;&gt;第一章 概述&lt;/h2&gt;
&lt;h3 id=&#34;本章的重要概念&#34;&gt;本章的重要概念&lt;/h3&gt;
&lt;p&gt;1）计算机网络（可简称为网络）把许多计算机连接在一起，而互连网则把许多网络连接在一起，是网络的网络。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【浅谈LLC谐振变换器】- 章节0:LLC的定义以及优势</title>
      <link>https://eddycliff.github.io/posts/tech/llc-resonant-converters-0/</link>
      <pubDate>Sun, 05 Nov 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/llc-resonant-converters-0/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;谐振变换器-第1节&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;感谢您打开这篇博客，在这里，每次启程都承载着新的发现与学习的机会。&lt;/p&gt;
&lt;p&gt;本节将开始《浅谈谐振LLC谐振变换器》系列，本系列围绕LLC谐振变换器展开，一个在现代电子设备中不可或缺的神秘组件。它利用巧妙的物理原理有效减少能量损失，保证了我们设备的高效运行。&lt;/p&gt;
&lt;p&gt;本系列学习路线：LLC的定义及优势 - LLC入门 - LLC工作原理 - LLC特性分析&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【浅谈LLC谐振变换器】- 章节1:LLC入门</title>
      <link>https://eddycliff.github.io/posts/tech/llc-resonant-converters-1/</link>
      <pubDate>Sun, 05 Nov 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/llc-resonant-converters-1/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;谐振变换器-第2节&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;感谢您打开这篇博客，在这里，每次启程都承载着新的发现与学习的机会。&lt;/p&gt;
&lt;p&gt;本节为《浅谈谐振LLC谐振变换器》系列第2节，本系列围绕LLC谐振变换器展开，一个在现代电子设备中不可或缺的神秘组件。它利用巧妙的物理原理有效减少能量损失，保证了我们设备的高效运行。&lt;/p&gt;
&lt;p&gt;本系列学习路线：LLC的定义及优势 - LLC入门 - LLC工作原理 - LLC特性分析&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【浅谈LLC谐振变换器】- 章节2:LLC工作原理</title>
      <link>https://eddycliff.github.io/posts/tech/llc-resonant-converters-2/</link>
      <pubDate>Sun, 05 Nov 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/llc-resonant-converters-2/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;谐振变换器-第3节&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;感谢您打开这篇博客，在这里，每次启程都承载着新的发现与学习的机会。&lt;/p&gt;
&lt;p&gt;本节为《浅谈谐振LLC谐振变换器》系列第3节，本系列围绕LLC谐振变换器展开，一个在现代电子设备中不可或缺的神秘组件。它利用巧妙的物理原理有效减少能量损失，保证了我们设备的高效运行。&lt;/p&gt;
&lt;p&gt;本系列学习路线：LLC的定义及优势 - LLC入门 - LLC工作原理 - LLC特性分析&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【浅谈LLC谐振变换器】- 章节3:LLC特性分析</title>
      <link>https://eddycliff.github.io/posts/tech/llc-resonant-converters-3/</link>
      <pubDate>Sun, 05 Nov 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/llc-resonant-converters-3/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;谐振变换器-第4节&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;感谢您打开这篇博客，在这里，每次启程都承载着新的发现与学习的机会。&lt;/p&gt;
&lt;p&gt;本节为《浅谈谐振LLC谐振变换器》系列第4节，本系列围绕LLC谐振变换器展开，一个在现代电子设备中不可或缺的神秘组件。它利用巧妙的物理原理有效减少能量损失，保证了我们设备的高效运行。&lt;/p&gt;
&lt;p&gt;本系列学习路线：LLC的定义及优势 - LLC入门 - LLC工作原理 - LLC特性分析&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【嵌入式C语言编程】第十章 文件</title>
      <link>https://eddycliff.github.io/posts/tech/c-programming-10file/</link>
      <pubDate>Mon, 23 Oct 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/c-programming-10file/</guid>
      <description>&lt;h2 id=&#34;第十章-文件&#34;&gt;第十章 文件&lt;/h2&gt;
&lt;h2 id=&#34;init&#34;&gt;INIT&lt;/h2&gt;
&lt;div align = &#34;center&#34;&gt;
&lt;img src = &#34;https://testingcf.jsdelivr.net/gh/EddyCliff/ChartBed/Blog-Common-Images/INIT.jpg&#34; alt = &#34;INIT.jpg&#34; width = &#34;70%&#34; height = &#34;auto&#34;&gt;
&lt;/div&gt;
&lt;br/&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;INIT：本节内容正式开始。action!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;一文件的概念&#34;&gt;一、文件的概念&lt;/h2&gt;
&lt;p&gt;文件用来存放程序、文档、音频、视频数据、图片等数据的。&lt;/p&gt;
&lt;p&gt;文件就是存放在磁盘上的，一些数据的集合。在windows下可以通过写字板或记事本打开文本文件对文件进行编辑保存。写字板和记事&lt;/p&gt;
&lt;p&gt;本是微软程序员写的程序，对文件进行打开、显示、读写、关闭。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【嵌入式C语言编程】第八章 结构体，共用体，枚举</title>
      <link>https://eddycliff.github.io/posts/tech/c-programming-08struct/</link>
      <pubDate>Sun, 01 Oct 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/c-programming-08struct/</guid>
      <description>&lt;h2 id=&#34;第八章-结构体共用体枚举&#34;&gt;第八章 结构体，共用体，枚举&lt;/h2&gt;
&lt;h2 id=&#34;init&#34;&gt;INIT&lt;/h2&gt;
&lt;div align = &#34;center&#34;&gt;
&lt;img src = &#34;https://testingcf.jsdelivr.net/gh/EddyCliff/ChartBed/Blog-Common-Images/INIT.jpg&#34; alt = &#34;INIT.jpg&#34; width = &#34;70%&#34; height = &#34;auto&#34;&gt;
&lt;/div&gt;
&lt;br/&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;INIT：本节内容正式开始。action!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;一结构体类型的概念及定义&#34;&gt;一、结构体类型的概念及定义&lt;/h3&gt;
&lt;h4 id=&#34;11-基本概述&#34;&gt;1.1 基本概述&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;构造类型：&lt;/strong&gt;
不是基本类型的数据结构也不是指针，它是若干个相同或不同类型的数据构成的集合
常用的构造类型有数组、结构体、共用体&lt;/p&gt;
&lt;p&gt;数组用于保存多个相同类型的数据
结构体用于保存多个不同类型的数据&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【嵌入式C语言编程】第六章 动态内存申请</title>
      <link>https://eddycliff.github.io/posts/tech/c-programming-06dynamic-memory/</link>
      <pubDate>Sun, 01 Oct 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/c-programming-06dynamic-memory/</guid>
      <description>&lt;h2 id=&#34;第六章-动态内存申请&#34;&gt;第六章 动态内存申请&lt;/h2&gt;
&lt;h2 id=&#34;init&#34;&gt;INIT&lt;/h2&gt;
&lt;div align = &#34;center&#34;&gt;
&lt;img src = &#34;https://testingcf.jsdelivr.net/gh/EddyCliff/ChartBed/Blog-Common-Images/INIT.jpg&#34; alt = &#34;INIT.jpg&#34; width = &#34;70%&#34; height = &#34;auto&#34;&gt;
&lt;/div&gt;
&lt;br/&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;INIT：本节内容正式开始。action!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;一动态分配内存的概&#34;&gt;一、动态分配内存的概&lt;/h3&gt;
&lt;p&gt;在数组一章中，介绍过数组的长度是预先定义好的，在整个程序中固定不变，但是在实际的编程中，往往会发生这种情况，即所需的内存空间取决于实际输入的数据，而无法预先确定 。&lt;/p&gt;
&lt;p&gt;为了解决上述问题，Ｃ语言提供了一些内存管理函数，这些内存管理函数可以按需要动态的分配内存空间，也可把不再使用的空间回收再次利用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【嵌入式C语言编程】第七章 字符串处理函数</title>
      <link>https://eddycliff.github.io/posts/tech/c-programming-07string/</link>
      <pubDate>Sun, 01 Oct 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/c-programming-07string/</guid>
      <description>&lt;h2 id=&#34;第七章-字符串处理函数&#34;&gt;第七章 字符串处理函数&lt;/h2&gt;
&lt;h2 id=&#34;init&#34;&gt;INIT&lt;/h2&gt;
&lt;div align = &#34;center&#34;&gt;
&lt;img src = &#34;https://testingcf.jsdelivr.net/gh/EddyCliff/ChartBed/Blog-Common-Images/INIT.jpg&#34; alt = &#34;INIT.jpg&#34; width = &#34;70%&#34; height = &#34;auto&#34;&gt;
&lt;/div&gt;
&lt;br/&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;INIT：本节内容正式开始。action!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;一获取字符串长度函数&#34;&gt;一、获取字符串长度函数&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;size_t&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strlen&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;s);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;功能：计算一个字符串的长度&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;参数：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  s&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;：指定的字符串&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;返回值：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;当前字符串的长度&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;注意：&lt;/span&gt;strlen获取的字符串长度遇到第一个&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;结束且\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;不算做字符串长度之中&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;argv[])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;//使用strlen函数获取字符串的长度
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;//strlen获取的字符串的长度遇到第一个\0结束
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; s1[&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hel&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;lo&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s1_len = %d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;strlen&lt;/span&gt;(s1));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s1_size = %d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(s1));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;s2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s2_len = %d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;strlen&lt;/span&gt;(s2));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s2_size = %d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(s2));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行结果&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;s1_len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;s1_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;s2_len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;s2_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;二字符串拷贝函数&#34;&gt;二、字符串拷贝函数&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;strcpy&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;dest, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;src);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;功能：将&lt;/span&gt;src复制给dest
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;参数：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  dest&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;：目的字符串&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  src&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;：源字符串&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;返回值：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;保存&lt;/span&gt;dest字符串的首地址
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;注意：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;使用&lt;/span&gt;strcpy函数复制字符串时必须保证dest足够大&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，否则会内存溢出&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  strcpy是将src字符串中第一个&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;之前包括\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;复制给&lt;/span&gt;dest
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;strncpy&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;dest, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;src, &lt;span style=&#34;color:#66d9ef&#34;&gt;size_t&lt;/span&gt; n);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;函数的说明：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;将&lt;/span&gt;src指向的字符串前n个字节&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，拷贝到&lt;/span&gt;dest指向的内存中
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;返回值&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;目的内存的首地址&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;注意：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;、&lt;/span&gt;strncpy不拷贝 &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;‘\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;’&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;、如果&lt;/span&gt;n大于src指向的字符串中的字符个数&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，则在&lt;/span&gt;dest后面填充n&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;‐&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;strlen&lt;/span&gt;(src)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;个’\&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;’&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;argv[])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;//使用strcpy函数拷贝字符串
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; s1[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;//使用strcpy函数时，必须保证第一个参数的内存足够大
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;//char s1[5] = &amp;#34;abcd&amp;#34;;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; s2[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abcdefg&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;strcpy&lt;/span&gt;(s1, s2);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s1 = %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, s1);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[%c] ‐ %d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, s1[i], s1[i]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行结果&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【嵌入式C语言编程】第四章 预处理</title>
      <link>https://eddycliff.github.io/posts/tech/c-programming-04preprocessing/</link>
      <pubDate>Sun, 01 Oct 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/c-programming-04preprocessing/</guid>
      <description>&lt;h2 id=&#34;第四章-预处理&#34;&gt;第四章 预处理&lt;/h2&gt;
&lt;h2 id=&#34;init&#34;&gt;INIT&lt;/h2&gt;
&lt;div align = &#34;center&#34;&gt;
&lt;img src = &#34;https://testingcf.jsdelivr.net/gh/EddyCliff/ChartBed/Blog-Common-Images/INIT.jpg&#34; alt = &#34;INIT.jpg&#34; width = &#34;70%&#34; height = &#34;auto&#34;&gt;
&lt;/div&gt;
&lt;br/&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;INIT：本节内容正式开始。action!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;一c语言编译过程&#34;&gt;一、C语言编译过程&lt;/h3&gt;
&lt;p&gt;C语言的编译过程：&lt;/p&gt;
&lt;p&gt;预处理、编译、汇编、链接&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gcc -E hello.c -o hello.i&lt;/code&gt;  1、预处理&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gcc -S hello.i –o hello.s&lt;/code&gt;  2、编译&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gcc -c hello.s -o hello.o&lt;/code&gt; 3、汇编&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gcc hello.o -o hello_elf&lt;/code&gt;  4、链接&lt;/p&gt;
&lt;p&gt;1：预编译&lt;/p&gt;
&lt;p&gt;将.c 中的头文件展开、宏展开&lt;/p&gt;
&lt;p&gt;生成的文件是.i文件&lt;/p&gt;
&lt;p&gt;2：编译&lt;/p&gt;
&lt;p&gt;将预处理之后的.i 文件生成 .s 汇编文件&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【嵌入式C语言编程】第五章 指针</title>
      <link>https://eddycliff.github.io/posts/tech/c-programming-05pointer/</link>
      <pubDate>Sun, 01 Oct 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/c-programming-05pointer/</guid>
      <description>&lt;h2 id=&#34;第五章-指针&#34;&gt;第五章 指针&lt;/h2&gt;
&lt;h2 id=&#34;init&#34;&gt;INIT&lt;/h2&gt;
&lt;div align = &#34;center&#34;&gt;
&lt;img src = &#34;https://testingcf.jsdelivr.net/gh/EddyCliff/ChartBed/Blog-Common-Images/INIT.jpg&#34; alt = &#34;INIT.jpg&#34; width = &#34;70%&#34; height = &#34;auto&#34;&gt;
&lt;/div&gt;
&lt;br/&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;INIT：本节内容正式开始。action!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;一关于内存那点事&#34;&gt;一、关于内存那点事&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;存储器：存储数据器件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;外存&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;外存又叫外部存储器，长期存放数据，掉电不丢失数据&lt;/p&gt;
&lt;p&gt;常见的外存设备：硬盘、flash、rom、u盘、光盘、磁带&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内存&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;内存又叫内部存储器，暂时存放数据，掉电数据丢失&lt;/p&gt;
&lt;p&gt;常见的内存设备：ram、DDR&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【嵌入式C语言编程】第二章 数组</title>
      <link>https://eddycliff.github.io/posts/tech/c-programming-02array/</link>
      <pubDate>Sat, 16 Sep 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/c-programming-02array/</guid>
      <description>&lt;h2 id=&#34;第二章-数组&#34;&gt;第二章 数组&lt;/h2&gt;
&lt;h2 id=&#34;init&#34;&gt;INIT&lt;/h2&gt;
&lt;div align = &#34;center&#34;&gt;
&lt;img src = &#34;https://testingcf.jsdelivr.net/gh/EddyCliff/ChartBed/Blog-Common-Images/INIT.jpg&#34; alt = &#34;INIT.jpg&#34; width = &#34;70%&#34; height = &#34;auto&#34;&gt;
&lt;/div&gt;
&lt;br/&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;INIT：本节内容正式开始。action!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;一数组的概念&#34;&gt;一、数组的概念&lt;/h3&gt;
&lt;p&gt;数组是若干个相同类型的变量在内存中有序存储的集合。&lt;/p&gt;
&lt;p&gt;概念理解：&lt;/p&gt;
&lt;p&gt;数组用于存储一组数据&lt;/p&gt;
&lt;p&gt;数组里面存储的数据类型必须是相同的&lt;/p&gt;
&lt;p&gt;数组在内存中会开辟一块连续的空间&lt;/p&gt;
&lt;p&gt;&lt;code&gt;int a[10];&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;//定义了一个整型的数组a，a是数组的名字，数组中有10个元素，每个元素的类型都是int类型，而且在内存中连续存储。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【嵌入式C语言编程】第三章 函数</title>
      <link>https://eddycliff.github.io/posts/tech/c-programming-03fun/</link>
      <pubDate>Sat, 16 Sep 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/c-programming-03fun/</guid>
      <description>&lt;h2 id=&#34;第三章-函数&#34;&gt;第三章 函数&lt;/h2&gt;
&lt;h2 id=&#34;init&#34;&gt;INIT&lt;/h2&gt;
&lt;div align = &#34;center&#34;&gt;
&lt;img src = &#34;https://testingcf.jsdelivr.net/gh/EddyCliff/ChartBed/Blog-Common-Images/INIT.jpg&#34; alt = &#34;INIT.jpg&#34; width = &#34;70%&#34; height = &#34;auto&#34;&gt;
&lt;/div&gt;
&lt;br/&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;INIT：本节内容正式开始。action!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;一函数的概念&#34;&gt;一、函数的概念&lt;/h3&gt;
&lt;p&gt;函数是c语言的功能单位，实现一个功能可以封装一个函数来实现。&lt;/p&gt;
&lt;p&gt;定义函数的时候一切以功能为目的，根据功能去定函数的参数和返回值。&lt;/p&gt;
&lt;p&gt;函数就是讲特定功能的代码封装在一个函数内部，当要使用这些代码时，只需要通过函数名就可以使用，这样操作起来更加方便。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【C语言指南】代码注释规范</title>
      <link>https://eddycliff.github.io/posts/tech/c-language-comment-specification/</link>
      <pubDate>Tue, 12 Sep 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/c-language-comment-specification/</guid>
      <description>&lt;h2 id=&#34;常用的注释模板&#34;&gt;常用的注释模板&lt;/h2&gt;
&lt;p&gt;C语言并没有一个官方的注释规范，但有一些常见的注释风格和最佳实践，可以帮助你编写清晰、易于理解的注释。以下是一些常用的高效注释模板，你可以根据需要进行自定义：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;文件头注释：&lt;/strong&gt; 在每个源代码文件的顶部，包括以下信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * 文件名: example.c
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * 作者: Your Name
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * 日期: 2023-09-07
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * 描述: 这个文件包含了一个示例程序的源代码。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个注释用于标识文件的作者、日期和描述文件内容。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【GitHub 使用指南】解决大文件上传问题：Git LFS 最佳实践</title>
      <link>https://eddycliff.github.io/posts/tech/github-git-lfs/</link>
      <pubDate>Tue, 12 Sep 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/github-git-lfs/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;在进行版本控制时，管理大文件是一个常见但棘手的问题。GitHub为了维护性能和资源，对大文件的存储有一些限制。本文将介绍如何使用Git LFS（Large File Storage）来高效管理大文件，以及如何应对可能遇到的问题并提供解决方案。&lt;/p&gt;
&lt;h2 id=&#34;问题阐述&#34;&gt;问题阐述&lt;/h2&gt;
&lt;p&gt;你可能会遇到两种常见的问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;如何将大于GitHub默认50MB文件大小限制的大文件上传到仓库？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【GitHub使用指南】解决Git Push错误 - 502 Bad Gateway</title>
      <link>https://eddycliff.github.io/posts/tech/github_error-git_push/</link>
      <pubDate>Tue, 12 Sep 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/github_error-git_push/</guid>
      <description>&lt;h2 id=&#34;问题描述&#34;&gt;问题描述&lt;/h2&gt;
&lt;p&gt;输入&lt;code&gt;git push&lt;/code&gt;命令后报错&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-PowerShell&#34; data-lang=&#34;PowerShell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git push &lt;span style=&#34;color:#f92672&#34;&gt;-f&lt;/span&gt; origin main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Enumerating objects&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;149&lt;/span&gt;, done.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Counting objects&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;% (&lt;span style=&#34;color:#ae81ff&#34;&gt;149&lt;/span&gt;/&lt;span style=&#34;color:#ae81ff&#34;&gt;149&lt;/span&gt;), done.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Delta compression using up to &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; threads
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Compressing objects&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;% (&lt;span style=&#34;color:#ae81ff&#34;&gt;144&lt;/span&gt;/&lt;span style=&#34;color:#ae81ff&#34;&gt;144&lt;/span&gt;), done.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;error&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; RPC failed; HTTP &lt;span style=&#34;color:#ae81ff&#34;&gt;502&lt;/span&gt; curl &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; The requested URL returned error&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;502&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Writing objects&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;% (&lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt;/&lt;span style=&#34;color:#ae81ff&#34;&gt;148&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;1.36&lt;/span&gt; GiB | &lt;span style=&#34;color:#ae81ff&#34;&gt;237.00&lt;/span&gt; KiB/ssend-pack&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; unexpected disconnect &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; reading sideband packet
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Writing objects&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;% (&lt;span style=&#34;color:#ae81ff&#34;&gt;148&lt;/span&gt;/&lt;span style=&#34;color:#ae81ff&#34;&gt;148&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;1.39&lt;/span&gt; GiB | &lt;span style=&#34;color:#ae81ff&#34;&gt;2.68&lt;/span&gt; MiB/s, done.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Total &lt;span style=&#34;color:#ae81ff&#34;&gt;148&lt;/span&gt; (delta &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;), reused &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (delta &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), pack-reused &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fatal&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; the remote &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt; hung up unexpectedly
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;原因分析&#34;&gt;原因分析&lt;/h2&gt;
&lt;p&gt;这个错误表明在进行 &lt;code&gt;git push&lt;/code&gt; 操作时，出现了HTTP 502错误，这通常是由于远程Git服务器出现问题或网络问题导致的。HTTP 502错误是一种&amp;quot;Bad Gateway&amp;quot;错误，意味着Git服务器无法正常处理你的请求。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【GitHub使用指南】解决Git操作错误 - Github Action问题分析</title>
      <link>https://eddycliff.github.io/posts/tech/github-git-action-error/</link>
      <pubDate>Tue, 12 Sep 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/github-git-action-error/</guid>
      <description>&lt;h2 id=&#34;问题描述&#34;&gt;问题描述&lt;/h2&gt;
&lt;p&gt;当使用&lt;code&gt;GitHub Actions&lt;/code&gt;执行工作流程时，有时会遇到错误消息，其中一个常见的错误是：&lt;code&gt;Action failed with &#39;not found deploy key or tokens&lt;/code&gt;。这个错误通常表示&lt;code&gt;GitHub Actions&lt;/code&gt;在执行过程中找不到有效的部署密钥或访问令牌。这篇博客将帮助你了解如何解决这个问题。&lt;/p&gt;
&lt;h2 id=&#34;错误原因分析&#34;&gt;错误原因分析&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;GitHub Actions&lt;/code&gt;的工作流程中，有些操作需要使用密钥或令牌来访问GitHub存储库或执行其他敏感操作，例如推送更改到仓库。这些密钥或令牌通常存储在GitHub存储库的&lt;code&gt;Secrets&lt;/code&gt;中。当出现&lt;code&gt;not found deploy key or tokens&lt;/code&gt;错误时，这意味着&lt;code&gt;GitHub Actions&lt;/code&gt;无法找到所需的密钥或令牌。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【Hugo网站搭建】GitHub Action自动化部署Hugo博客</title>
      <link>https://eddycliff.github.io/posts/tech/github-action-hugo/</link>
      <pubDate>Wed, 06 Sep 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/github-action-hugo/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;在本文中，我们将介绍如何通过GitHub Action自动化部署Hugo博客。如果你是一个博客作者，你可能已经熟悉了使用Hugo构建和管理你的博客。Hugo是一个快速且灵活的静态网站生成器，但是手动部署博客可能会变得繁琐。为了解决这个问题，我们可以利用GitHub Action，这是一个GitHub提供的持续集成和持续交付（CI/CD）工具，来自动构建和部署我们的博客。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【Hugo网站搭建】bug日志 - 解决 YAML 解析错误</title>
      <link>https://eddycliff.github.io/posts/tech/hugo-bug-yaml/</link>
      <pubDate>Wed, 30 Aug 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/hugo-bug-yaml/</guid>
      <description>解决 Hugo 构建过程中出现的 YAML 解析错误。了解错误背后的原因，探讨正确的 YAML 头部格式，并提供修复方案，确保 Hugo 网站构建顺利进行。</description>
    </item>
    
    <item>
      <title>【Hugo网站搭建】图床工具PicGo-bug日志</title>
      <link>https://eddycliff.github.io/posts/tech/picgo-bug/</link>
      <pubDate>Wed, 30 Aug 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/picgo-bug/</guid>
      <description>解决 PicGo 图床工具中的 &amp;#34;unable to verify the first certificate&amp;#34; 错误。了解错误原因、网络加速工具可能引发的问题，并探讨关闭 fastgithub 解决方案。同时介绍 PicGo 官方文档中的常见问题和解决方法，确保图床上传稳定可靠。</description>
    </item>
    
    <item>
      <title>【Hugo网站搭建】GitHub&#43;jsDelivr&#43;PicGo搭建博客图床</title>
      <link>https://eddycliff.github.io/posts/tech/github-jsdelivr-picgo/</link>
      <pubDate>Tue, 29 Aug 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/github-jsdelivr-picgo/</guid>
      <description>在这篇【博客写作指南】中，了解如何利用GitHub、jsDelivr和PicGo搭建博客图床，为你的博客添加稳定的图片存储和快速的CDN加速服务。跟随详细步骤，轻松创建自己的图床，为博客内容增添视觉魅力。</description>
    </item>
    
    <item>
      <title>【Hugo网站搭建】博客写作指南-创意封面设计与选择</title>
      <link>https://eddycliff.github.io/posts/tech/blog-cover-design-selection/</link>
      <pubDate>Tue, 29 Aug 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/blog-cover-design-selection/</guid>
      <description>探索创意封面设计与选择的博客写作指南，了解如何为您的博客内容选择合适的封面图像，并掌握设计工具和资源，让您的博客在视觉上更具吸引力和专业性。提升您的博客封面，吸引读者注意，传达您的主题与理念。</description>
    </item>
    
    <item>
      <title>【Hugo网站搭建】博客写作指南-如何在Hugo博客中巧妙运用照片</title>
      <link>https://eddycliff.github.io/posts/tech/hugo_insert_png/</link>
      <pubDate>Tue, 29 Aug 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/hugo_insert_png/</guid>
      <description>了解如何在Hugo博客中巧妙使用照片，为您的内容增添视觉吸引力和表现力。</description>
    </item>
    
    <item>
      <title>【Hugo网站搭建】网站速度优化-利用Pingdom测试与提升</title>
      <link>https://eddycliff.github.io/posts/tech/website-speed-optimization/</link>
      <pubDate>Tue, 29 Aug 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/website-speed-optimization/</guid>
      <description>了解如何通过Pingdom工具测试您的网站速度，并探索针对测试结果采取的优化方法。优化网页加载时间，提升用户体验，加速页面响应，从而提高搜索引擎排名和访客留存率。从测试到优化，本指南将指导您使网站速度达到最佳状态。</description>
    </item>
    
    <item>
      <title>【Hugo网站搭建】优化网站性能-使用PageSpeed Insights评估与改进</title>
      <link>https://eddycliff.github.io/posts/tech/optimize-website-performance/</link>
      <pubDate>Tue, 29 Aug 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/optimize-website-performance/</guid>
      <description>了解如何利用PageSpeed Insights评估您的网站性能，并通过优化措施提升加载速度和用户体验。本指南将为您详细解释如何分析测试结果，并采取步骤来改进网站性能，以满足现代用户对快速加载页面的需求。</description>
    </item>
    
    <item>
      <title>【Hugo网站搭建】实现post-markdown引入树状目录</title>
      <link>https://eddycliff.github.io/posts/tech/hugo_introduce_a_tree_directory/</link>
      <pubDate>Fri, 25 Aug 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/hugo_introduce_a_tree_directory/</guid>
      <description>markdown引入树状目录</description>
    </item>
    
    <item>
      <title>【Github使用指南】release上的安装包amd和arm的选择</title>
      <link>https://eddycliff.github.io/posts/tech/github-amd-arm/</link>
      <pubDate>Sun, 20 Aug 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/github-amd-arm/</guid>
      <description>release上的安装包amd和arm的选择</description>
    </item>
    
    <item>
      <title>【Hugo网站搭建】bug日志-hugo server失败</title>
      <link>https://eddycliff.github.io/posts/tech/hugo_server_failed/</link>
      <pubDate>Sun, 20 Aug 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/hugo_server_failed/</guid>
      <description>error:hugo server失败</description>
    </item>
    
    <item>
      <title>【Linux应用开发指南】vmware实现复制粘贴功能</title>
      <link>https://eddycliff.github.io/posts/tech/linux-vmware-copy-and-paste/</link>
      <pubDate>Sat, 19 Aug 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/linux-vmware-copy-and-paste/</guid>
      <description>vmware实现复制粘贴功能</description>
    </item>
    
    <item>
      <title>【Hugo网站搭建】实现post-markdown引用本地图片</title>
      <link>https://eddycliff.github.io/posts/tech/hugo_referencing_local_images/</link>
      <pubDate>Sun, 13 Aug 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/hugo_referencing_local_images/</guid>
      <description>markdown引用本地图片</description>
    </item>
    
    <item>
      <title>【Hugo网站搭建】在Github仓库分别储存博客源码和静态页面</title>
      <link>https://eddycliff.github.io/posts/tech/hugo_saving_source_code/</link>
      <pubDate>Fri, 11 Aug 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/hugo_saving_source_code/</guid>
      <description>在Github仓库分别储存博客源码和静态页面</description>
    </item>
    
    <item>
      <title>【Github使用指南】bug日志-删除本地仓库/错误的远程仓库关联</title>
      <link>https://eddycliff.github.io/posts/tech/github-delete-wrong-repository/</link>
      <pubDate>Thu, 10 Aug 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/github-delete-wrong-repository/</guid>
      <description>删除本地仓库/错误的远程仓库关联</description>
    </item>
    
    <item>
      <title>【Github使用指南】bug日志-git remote</title>
      <link>https://eddycliff.github.io/posts/tech/github-error-git-remote/</link>
      <pubDate>Thu, 20 Jul 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/github-error-git-remote/</guid>
      <description>解决{error: remote origin already exists.}</description>
    </item>
    
    <item>
      <title>【Hugo网站搭建】添加不蒜子Busuanzi页面浏览次数与阅读数据统计</title>
      <link>https://eddycliff.github.io/posts/tech/hugo-busuanzi/</link>
      <pubDate>Mon, 10 Jul 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/hugo-busuanzi/</guid>
      <description>Hugo添加不蒜子Busuanzi页面浏览次数与阅读数据统计</description>
    </item>
    
    <item>
      <title>【Github使用指南】bug日志-OpenSSL SSL_read</title>
      <link>https://eddycliff.github.io/posts/tech/gitub-error1/</link>
      <pubDate>Tue, 20 Jun 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/gitub-error1/</guid>
      <description>解决{OpenSSL SSL_read: Connection was reset, errno 10054}</description>
    </item>
    
    <item>
      <title>【Github使用指南】将仓库中的master分支合并到main分支</title>
      <link>https://eddycliff.github.io/posts/tech/github-master-to-main-branch/</link>
      <pubDate>Tue, 20 Jun 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/github-master-to-main-branch/</guid>
      <description>将仓库中的master分支合并到main分支</description>
    </item>
    
    <item>
      <title>【Hugo网站搭建】实现代码高亮</title>
      <link>https://eddycliff.github.io/posts/tech/hugo_code_highlight/</link>
      <pubDate>Sat, 10 Jun 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/hugo_code_highlight/</guid>
      <description>Hugo代码高亮</description>
    </item>
    
    <item>
      <title>【Hugo网站搭建】主题美化-添加emoji</title>
      <link>https://eddycliff.github.io/posts/tech/hugo_emoji/</link>
      <pubDate>Sat, 13 May 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/hugo_emoji/</guid>
      <description>Hugo主题美化-添加emoji</description>
    </item>
    
    <item>
      <title>【Hugo网站搭建】bug日志-将网站部署到GitHub远程仓库时出现了错误</title>
      <link>https://eddycliff.github.io/posts/tech/hugo_error1/</link>
      <pubDate>Mon, 17 Apr 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/hugo_error1/</guid>
      <description>error:在本地使用Hugo构建网站并在本地服务器上正常运行，但在将网站部署到GitHub远程仓库时出现了错误</description>
    </item>
    
    <item>
      <title>【Hugo网站搭建】Githubpages托管服务对应仓库username.github.io</title>
      <link>https://eddycliff.github.io/posts/tech/hugo_githubpages/</link>
      <pubDate>Sat, 11 Mar 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/hugo_githubpages/</guid>
      <description>githubpages对应仓库username.github.io删除之后,重新创建一次仍然可以匹配到githubpages</description>
    </item>
    
    <item>
      <title>【Hugo网站搭建】在config.yml中设置主页头像</title>
      <link>https://eddycliff.github.io/posts/tech/hugo_homepage_avatar/</link>
      <pubDate>Sat, 11 Mar 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/hugo_homepage_avatar/</guid>
      <description>Hugo设置主页头像</description>
    </item>
    
    <item>
      <title>【Hugo网站搭建】在网站主页添加icon&#43;socialIcons(利用svg.html和config.yml)</title>
      <link>https://eddycliff.github.io/posts/tech/hugo_icon/</link>
      <pubDate>Fri, 20 Jan 2023 00:17:58 +0800</pubDate>
      
      <guid>https://eddycliff.github.io/posts/tech/hugo_icon/</guid>
      <description>Hugo添加icon&#43;socialIcons</description>
    </item>
    
  </channel>
</rss>
